<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->

<common:LayoutAwarePage
    x:Class="SDKSample.XAMLPopup.Scenario2"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SDKSample.XAMLPopup"
    xmlns:common="using:SDKSample.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1" Grid.Row="0" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
                As a container for FrameworkElement objects, the <Bold>Popup</Bold> can host Input content.  When hosting Input controls 
                (i.e., TextBox) you want to make sure you consider the touch keyboard that may slide into view for your application.  The Popup will 
                automatically reposition itself (like other UIElements) when the touch keyboard is in view <Bold>as long as the Popup has a parent already in the visual tree</Bold>.
                <LineBreak /><LineBreak />
                Below are two examples (also demonstrating using a UserControl) where the Popup is in the visual tree and one where it is not (created in code). 
                Using a touch monitor, tablet or the simulator in Visual Studio, show the Popup and then tap into the TextBox.  Notice the two different 
                behaviors of how the Popup moves along with the keyboard when it has a UIElement parent and when it doesn't. (NOTE: we are explicitly setting this below the viewable area to show the keyboard impact.)
            </TextBlock>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <StackPanel>
                <Button Content="Show Popup (with Parent)" Click="ShowPopupWithParentClicked" />
                <Button Content="Show Popup (no Parent)" Click="ShowPopupWithoutParentClicked" />
            </StackPanel>
            <Popup x:Name="ParentedPopup" HorizontalOffset="200" VerticalOffset="200">
                <local:PopupInputContent />
            </Popup>
        </Grid>
    </Grid>
</common:LayoutAwarePage>
