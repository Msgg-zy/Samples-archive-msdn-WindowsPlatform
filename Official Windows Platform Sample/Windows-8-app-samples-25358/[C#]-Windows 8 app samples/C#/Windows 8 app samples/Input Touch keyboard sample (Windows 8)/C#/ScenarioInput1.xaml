<!-- THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF 
 ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
 PARTICULAR PURPOSE.

 Copyright (c) Microsoft Corporation. All rights reserved -->
<Page
	x:Class="TouchKeyboard.ScenarioInput1"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d"
	d:DesignHeight="300"
	d:DesignWidth="400">

	<!-- Replace the markup below with your specific markup. -->
	<StackPanel>
        <TextBlock TextWrapping="Wrap" Style="{StaticResource DescriptionTextStyle}" Text="When using XAML controls that accept input (i.e. TextBox, RichTextBox, PasswordBox), the Touch Keyboard will invoke automatically when the user taps on the control using touch or pen. This behavior also holds for controls that are derived from these classes.&#13;&#13;For custom controls that require keyboard input and are not derived from one of the previously mentioned controls, one needs to implement the following UI Automation Control Pattern interfaces: the TextPattern provider interface (ITextProvider) and the ValuePattern provider interface (IValueProvider). This will ensure that the touch Keyboard will invoke when a user taps on the custom control. &#13;&#13;See ScenarioOutput1.xaml.cs (output area), CustomControl1.xaml.cs (Extended Textbox and CustomControl1) and CustomControl2.xaml.cs (CustomControls2) for the code required in this example."></TextBlock>
        <TextBlock TextWrapping="Wrap" Style="{StaticResource DescriptionTextStyle}" FontStyle="Italic" Text="Note that the two custom controls are not real implementations of a text control; they merely log a keypress instead of displaying the typed character."></TextBlock>        
    </StackPanel>
</Page>