<!-- THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF 
 ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
 PARTICULAR PURPOSE.

 Copyright (c) Microsoft Corporation. All rights reserved -->
<Page
	x:Class="PushAndPeriodicNotificationsSampleCS.ScenarioInput1"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d"
	d:DesignHeight="300"
	d:DesignWidth="400">

	<StackPanel>
    <TextBlock Style="{StaticResource DescriptionTextStyle}" TextWrapping="Wrap">
      In this scenario, the app will request a notification channel and send it to the app's cloud service. 
      Additionally, this scenario shows how to close a notification channel.
      <LineBreak/>
      <LineBreak/>
      A notification channel uniquely identifies an instance of your app per user, per machine. The notification 
      channel can be used to send tile, toast, badge, and raw notifications to a specific user on a specific 
      device. Each app can have only one channel per tile. The channel created for the app's primary tile can 
      be used to send all notification types. Each tile on the Start screen will have a unique channel to which 
      tile notifications can be sent.
      <LineBreak/>
      <LineBreak/>
      Once your app receives a push notification channel, the app should send it to your app's cloud service, 
      which will store the channel and associate it with the app user who sent the channel. When you want to 
      send a notification to a user (for example, to update the user's app tile) the app cloud service will 
      perform an HTTP POST operation on the channel URI.
      <LineBreak/>
      <LineBreak/>
      Because notification channels expire, your app must take care to manage the renewal of the notification 
      channels, which is discussed in scenario 2.
      <LineBreak/>
      <LineBreak/>
      Note that your app's package will need to set the "Internet (client)" capability in its manifest. This 
      allows it to communicate with the Internet to send channels to your app's server.
      <LineBreak/>
      <LineBreak/>
      There may be cases where it is appropriate to close a push notification channel. For example, if a user 
      account is tied to the notifications they receive and the user logs off that account, the channel should 
      be closed if the user clears her credentials. 
    </TextBlock>
    <TextBlock Style="{StaticResource H4Style}" TextWrapping="Wrap">
      Click the buttons below to open or close notification channels.
      Note that you must specify a URL and authentication parameters.
    </TextBlock>
    <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
      <TextBlock Style="{StaticResource DescriptionTextStyle}" TextWrapping="Wrap" Text="Server URL:" />
      <TextBox x:Name="ServerText" Text="http://" Width="500" />
    </StackPanel>
    <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
      <Button x:Name="OpenChannel" Content="Reopen channel and send to server" Margin="0,0,10,0" Click="OpenChannel_Click"/>
      <Button x:Name="CloseChannel" Content="Close channel" Margin="0,0,10,0" Click="CloseChannel_Click"/>
    </StackPanel>
	</StackPanel>
</Page>