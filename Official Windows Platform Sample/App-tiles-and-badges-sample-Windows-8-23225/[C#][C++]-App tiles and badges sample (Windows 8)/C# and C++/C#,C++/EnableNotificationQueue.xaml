<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->

<common:LayoutAwarePage
    x:Class="SDKSample.Tiles.EnableNotificationQueue"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SDKSample.Tiles"
    xmlns:common="using:SDKSample.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White" HorizontalAlignment="Left" VerticalAlignment="Top">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <StackPanel>
                <TextBlock Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="This scenario demonstrates how to queue more than one notification and control which notifications are replaced as new notifications arrive."/>
                <TextBlock Style="{StaticResource BasicTextStyle}" Margin="0,10,0,0"  TextWrapping="Wrap" Text="Notification Queue" FontWeight="Bold"/>
                <TextBlock Style="{StaticResource BasicTextStyle}" Margin="0,10,0,0" TextWrapping="Wrap" >
            	    Windows will save up to five notifications if this setting is enabled and automatically cycle between them. Notifications will be saved in a FIFO (first in, first out) queue according to arrival time. The display order and animation time for notifications cannot be controlled by applications. A new notification is always displayed immediately.
            	    <LineBreak/>
            	    Up to five push notifications will be saved for offline users and delivered when the user comes online. These undelivered notifications also conform to the FIFO queue described above and tag logic described below.
                </TextBlock>
                <StackPanel Orientation="Horizontal" >
                    <Button x:Name="EnableQueue" Content="Enable notification queue" Click="EnableNotificationQueue_Click"/>
                    <Button x:Name="DisableQueue" Content="Disable notification queue" Click="DisableNotificationQueue_Click"/>
                </StackPanel>

                <TextBlock Style="{StaticResource BasicTextStyle}" Margin="0,10,0,0"  TextWrapping="Wrap" Text="Tags" FontWeight="Bold"/>
                <TextBlock Style="{StaticResource BasicTextStyle}" Margin="0,10,0,0" TextWrapping="Wrap" Text="Tags (application specified strings) can be used to replace notifications. If the notification queue is enabled, untagged notifications will queue in FIFO order. A tagged notification will replace a queued notification with the same tag. There can only be one notification with the same tag in the queue at a time. Tags which are sent from the cloud are limited to the alpha-numeric character set." />
                <StackPanel Orientation="Vertical" >
                    <StackPanel Orientation="Horizontal" >
                        <TextBlock Style="{StaticResource BasicTextStyle}" Margin="0,10,0,0" TextWrapping="Wrap" Text="Tag (default to TestTag01, maximum of 16 characters):" />
                        <TextBox x:Name="IdBox" Text="" Margin="5,0,0,0" Width="200"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" >
                        <TextBlock Style="{StaticResource BasicTextStyle}"  Margin="0,10,0,0" TextWrapping="Wrap" Text="Text:" />
                        <TextBox x:Name="TextContent" Text=" " Margin="5,0,0,0" Width="200"/>
                    </StackPanel>
                </StackPanel>
                <StackPanel Orientation="Horizontal" >
                    <Button x:Name="UpdateTile" Content="Send tile notification with a tag" Click="UpdateTile_Click"/>
                    <Button x:Name="ClearTile" Content="Clear tile" Click="ClearTile_Click"/>
                </StackPanel>
            </StackPanel>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <TextBlock x:Name="OutputTextBlock" Text="" TextWrapping="Wrap"  Style="{StaticResource BasicTextStyle}" IsTextSelectionEnabled="True"/>
        </Grid>

        <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="FullScreenLandscape"/>
                <VisualState x:Name="Filled"/>
                <VisualState x:Name="FullScreenPortrait"/>
                <VisualState x:Name="Snapped"/>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>

</common:LayoutAwarePage>
