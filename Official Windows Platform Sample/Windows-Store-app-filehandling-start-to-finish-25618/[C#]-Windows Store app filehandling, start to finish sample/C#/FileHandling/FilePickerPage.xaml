<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page
    x:Name="pageRoot"
    x:Class="FileHandling.FilePickerPage"
    DataContext="{Binding DefaultViewModel, RelativeSource={RelativeSource Self}}"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:FileHandling"
    xmlns:common="using:FileHandling.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    RightTapped="pageRoot_RightTapped">

    <Page.Resources>
        <common:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <!-- TODO: Delete this line if the key AppName is declared in App.xaml -->
        <x:String x:Key="AppName">FilePicker</x:String>
    </Page.Resources>

    <!--
        This grid acts as a root panel for the page that defines two rows:
        * Row 0 contains the back button and page title
        * Row 1 contains the rest of the page layout
    -->
    <Grid Name="PageGrid" Background="{StaticResource ApplicationPageBackgroundThemeBrush}">
        <Grid.ChildrenTransitions>
            <TransitionCollection>
                <EntranceThemeTransition/>
            </TransitionCollection>
        </Grid.ChildrenTransitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="140"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Back button and page title -->
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="120"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <AppBarButton x:Name="backButton" Icon="Back" Height="95" Margin="10,46,10,0"
                          Command="{Binding NavigationHelper.GoBackCommand, ElementName=pageRoot}" 
                          Visibility="{Binding IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource Mode=Self}}"
                          AutomationProperties.Name="Back"
                          AutomationProperties.AutomationId="BackButton"
                          AutomationProperties.ItemType="Navigation Button"/>
            <TextBlock x:Name="pageTitle" Text="{StaticResource AppName}" Style="{StaticResource HeaderTextBlockStyle}" Grid.Column="1" 
                       IsHitTestVisible="false" TextWrapping="NoWrap" VerticalAlignment="Bottom" Margin="0,0,30,40"/>
        </Grid>
        <Grid Grid.Row="1">
            <StackPanel>
                <TextBlock Margin="15,0" Style="{StaticResource SubheaderTextBlockStyle}">Sample Description</TextBlock>
                <TextBlock Margin="15,5" TextWrapping="Wrap" HorizontalAlignment="Left" Style="{StaticResource BasicTextStyle}">
                Pickers display a list of files or folders from which a user can select one or more items for further processing. 
                This page illustrates several ways to use the various pickers: selecting a single file, selecting multiple files, and selecting a folder.
                </TextBlock>

                <TextBlock Margin="15,0" Style="{StaticResource SubheaderTextBlockStyle}">Sample Instructions</TextBlock>
                <TextBlock Margin="15,5" TextWrapping="Wrap" HorizontalAlignment="Left" Style="{StaticResource BasicTextStyle}">
                Click the button associated with the part of the sample you wish to run:
                </TextBlock>
                <RichTextBlock IsTextSelectionEnabled="True" TextAlignment="Left" FontSize="12" FontFamily="Segoe UI" Margin="20,0">
                    <Paragraph TextIndent="10">Select a single file - Instantiates a FileOpenPicker object, settings its ViewMode, SuggestedStartLocation, and filter properties (to 
                    display only certain image files). If the user selects a file, the name of the selected file is displayed in the Output section.</Paragraph>
                    <Paragraph TextIndent="10">Select multiple files - This sample does much the same thing in configuring the FileOpenPicker that the Select Single File does except
                    that it uses the FileOpenPicker.PickMultipleFiles method (as opposed to the FileOpenPicker.PickSingleFileAsync) and enumerates the returned list of selected files
                    in order to display their file names in the Output section.</Paragraph>
                    <Paragraph TextIndent="10">Select a folder - This sample illustrates how to allow a user to select a folder.</Paragraph>
                </RichTextBlock>

                <StackPanel Margin="15,5" Orientation="Horizontal">
                    <Button Margin="15,0" Name="SelectSingleFileButton" Content="Select a single file" Click="SelectSingleFileButton_Click"/>
                    <Button Margin="15,0" Name="SelectMultiFileButton" Content="Select multiple files" Click="SelectMultiFileButton_Click"/>
                    <Button Margin="15,0" Name="SelectFolder" Content="Select folder" Click="SelectFolderButton_Click"/>
                </StackPanel>

                <TextBlock Margin="15,0" Style="{StaticResource SubheaderTextBlockStyle}">Output</TextBlock>
                <StackPanel Margin="20,5" x:Name="Output"/>
            </StackPanel>
        </Grid>
    </Grid>
</Page>
