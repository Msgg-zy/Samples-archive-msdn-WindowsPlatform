<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->

<common:LayoutAwarePage
    x:Class="SDKSample.TouchKeyboard.Launch"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SDKSample.TouchKeyboard"
    xmlns:common="using:SDKSample.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White" HorizontalAlignment="Left" VerticalAlignment="Top">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <TextBlock Grid.Row="0" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" Text="When using XAML controls that accept input (i.e. TextBox, RichTextBox, PasswordBox), the Touch Keyboard will invoke automatically when the user taps on the control using touch or pen. This behavior also holds for controls that are derived from these classes.&#13;&#13;For custom controls that require keyboard input and are not derived from one of the previously mentioned controls, one needs to implement the following UI Automation Control Pattern interfaces: the TextPattern provider interface (ITextProvider) and the ValuePattern provider interface (IValueProvider). This will ensure that the Touch Keyboard will invoke when a user taps on the custom control. &#13;&#13;See Launch.xaml.* (output area and Extended TextBox), NonTouchableTextBlock.xaml.* and TouchableTextBlock.xaml.* for the code required in this example."></TextBlock>
            <TextBlock Grid.Row="1" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" FontStyle="Italic" Text="Note that the two modified Text Blocks are not real implementations of a text control; here the control merely logs a keypress instead of displaying the typed character."></TextBlock>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <StackPanel Grid.Row="0">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Width="300" HorizontalAlignment="Left" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" Text="XAML TextBox: "></TextBlock>
                    <TextBox Name="textBox" Width="500" Margin="2" Height="40" Padding="5" AutomationProperties.Name="XAML Text Box"></TextBox>
                </StackPanel>  
                <StackPanel Orientation="Horizontal">
                    <TextBlock Width="300" HorizontalAlignment="Left" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" Text="Extended TextBox control (derived from TextBox Class): "></TextBlock>
                    <local:CustomTextBox Margin="2"  Height="40" Width="500" AutomationProperties.Name="Extended XAML Text Box"></local:CustomTextBox>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Width="300" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" Text="Non Touchable Text Block (without Text/Value Pattern inplementation): "></TextBlock>
                    <local:NonTouchableTextBlock Margin="2" AutomationProperties.Name="Non Touchable Text Block" AutomationProperties.AutomationId="Non_Touchable_Text_Block" 
                        AutomationProperties.HelpText="Display text to indicate when a key is pressed. Content is cleared when move away from the field." >
                    </local:NonTouchableTextBlock>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Width="300" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" Text="Touchable Text Block (with Text/Value Pattern implementation): "></TextBlock>
                    <local:TouchableTextBlock Margin="2" AutomationProperties.Name="Touchable Text Block" AutomationProperties.AutomationId="Touchable_Text_Block" 
                        AutomationProperties.HelpText="Display text to indicate when a key is pressed. Content is cleared when move away from the field.">
                    </local:TouchableTextBlock>
                </StackPanel>
            </StackPanel>
        </Grid>

        <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="FullScreenLandscape"/>
                <VisualState x:Name="Filled"/>
                <VisualState x:Name="FullScreenPortrait"/>
                <VisualState x:Name="Snapped"/>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>

</common:LayoutAwarePage>
