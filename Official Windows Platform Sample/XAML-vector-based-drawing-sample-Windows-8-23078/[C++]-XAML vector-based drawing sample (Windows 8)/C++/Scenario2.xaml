<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="SDKSample.Drawing.Scenario2"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SDKSample.Drawing"
    xmlns:common="using:SDKSample.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1" Grid.Row="0" TextWrapping="Wrap" 
                       Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
                In the demonstration below, adjusting the slider will change the stroke thickness 
                of the rectangle displayed below. Likewise, changing the selected item of the ComboBox 
                will change the rectangle's fill color.
            </TextBlock>
            <!-- The following Slider controls the brush (border) thickness of the Scenario2Rectangle. -->
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0" Grid.Row="1">
                <TextBlock Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="Stroke thickness selection:" Margin="0,15,15,0" />
                <Slider x:Name="StrokeThicknessSelection" Width="250" Maximum="50" Minimum="0" HorizontalAlignment="Left" VerticalAlignment="Center" ValueChanged="StrokeWidthSelection_ValueChanged" />
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="0,10,0,0" Grid.Row="2">
                <!-- The following ComboBox controls the Fill color of the Scenario2Rectangle. -->
                <TextBlock Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="Fill selection:" Margin="0,15,15,0" />
                <ComboBox x:Name="FillSelection" Width="120" Height="40" VerticalAlignment="Center" SelectionChanged="FillSelection_SelectionChanged">
                    <ComboBoxItem>Red</ComboBoxItem>
                    <ComboBoxItem>Green</ComboBoxItem>
                    <ComboBoxItem>Blue</ComboBoxItem>
                    <ComboBoxItem>Gray</ComboBoxItem>
                </ComboBox>
            </StackPanel>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <StackPanel HorizontalAlignment="Left">
                <!-- Draws a rectangle. The rectangle's fill is specified by FillSelection_SelectionChanged and the thickness of the stroke is specified by StrokeWidthSelection_ValueChanged, both located in the MainPage.xaml code-behind file. -->
                <Rectangle x:Name="Scenario2Rectangle" Width="300" Height="120" Stroke="Black" StrokeThickness="4" Margin="0,0,0,10"/>

                <!-- Code to draw a rectangle. The rectangle's fill is from an image located in the Images folder. -->
                <Rectangle Width="300" Height="120" Stroke="Black" StrokeThickness="4">
                    <Rectangle.Fill>
                        <ImageBrush ImageSource="Assets/image1.jpg" />
                    </Rectangle.Fill>
                </Rectangle>
            </StackPanel>
        </Grid>

        <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="FullScreenLandscape"/>
                <VisualState x:Name="Filled"/>
                <VisualState x:Name="FullScreenPortrait"/>
                <VisualState x:Name="Snapped"/>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

    </Grid>
</common:LayoutAwarePage>
