<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>WindowsRuntimeComponentWP8</title>
    <style type="text/css">
 body
{
	color: #000000;
	font-family:	Verdana;
	font-size: medium;
	font-style: normal;
	font-weight: normal;
	margin-top:	0;
	margin-bottom:	0;
	margin-left:	0;
	margin-right:	0;
	width:	100%;
}
dl
{
	margin-top:	15;
	margin-bottom:5;
	padding-left:	1;
}

dl.authored dt {
	font-style:	bold;
	margin-top: 2;
}

dd {
	margin-left:	20px;
}

ul
{
	margin-top:0;
	margin-bottom:0;
	margin-left: 17;
	list-style-type: disc;
}

ul.nobullet
{
	display: block;
	list-style: none;
}

ul ul
{
	margin-bottom: 4;
	margin-left: 17;
	margin-top: 3;
	list-style-type: disc;
}

ol {
	margin-top:0;
	margin-bottom:0;
	margin-left: 28;
	list-style-type: decimal;
}

ol ol {
	margin-bottom: 4;
	margin-left: 28;
	margin-top: 3;
	list-style-type: lower-alpha;
}

li {
	margin-top: 5;
	margin-bottom: 5;
}

p {
	margin-top: 10;
	margin-bottom: 5;
}

a:link {
	color:	#0000FF;
}

a:visited {
	color: #DD7C3B;
}

a:hover {
	color:	#3366FF;
}

code
{
	font-family:	Monospace, Courier New, Courier;
	font-size: 105%;
	color:	#000066;
}

span.parameter {
	font-style: italic;
}

span.italic {
	font-style: italic;
}

span.selflink {
	font-weight: bold;
}

span.nolink {
	font-weight: bold;
}

div.breadCrumbs {
	font-size: 8pt;
	margin-bottom: 5;
	border-bottom-color: #C8CDDE;
	border-bottom-style: solid;
	border-bottom-width: 1;
	padding-bottom: 5;
}

div#mainSection
{
	font-size: 62.5%;
	width: 100%;
}
html&gt;body #mainSection
{
	font-size:73%;
	width: 100%;
}

div#mainBody
{
	font-size: 100%;
	margin-left: 15;
	margin-top: 10;
}

html&gt;body #mainBody
{
	font-size: 93%;
	margin-left: 15;
	margin-top: 10;
	padding-bottom: 20;
}

div#mainBody p, div#mainBody ol, div#mainBody ul, div#mainBody dl
{
	padding-right: 5;
}

div#header
{
	padding-top:	0;
	padding-bottom:	0;
	padding-left:	0;
	padding-right:	0;
	width:	100%;
}

div#header table
{
	width:	100%;
}

div#header table td
{
	color: #0000FF;
	font-size: 70%;
	margin-top:	0;
	margin-bottom:	0;
	padding-right: 20;
}

div#header table tr#headerTableRow2 td
{
	padding-left: 13px;
}

div#header table tr#headerTableRow3 td
{
	padding-top: 2px;
	padding-left: 15;
}

div#header table#bottomTable
{
	border-top-color: #FFFFFF;
	border-top-style: solid;
	border-top-width: 1;
	text-align: left;
	padding-left: 15;
	padding-top: 5px;
	padding-bottom: 5px;
}

div#mainSection table td.imageCell
{
	white-space: nowrap;
}

div#mainBody div.alert, div#mainBody div.code, div#mainBody div.tableSection
{
	width:98.9%;
}

div#mainBody div.section div.alert, div#mainBody div.section div.code,
div#mainBody div.section div.tableSection
{
	width:100%;
}

div#mainBody div.section ul div.alert, div#mainBody div.section ul div.code,
div#mainBody div.section ul div.tableSection, div#mainBody div.section ol div.alert, 
div#mainBody div.section ol div.code, div#mainBody div.section ol div.tableSection
{
	width:100%;
}

div.alert p, div.code p
{
	margin-top:5;
	margin-bottom:8;
}
dd p
{
	margin-top:2;
	margin-bottom:8;
}
div.tableSection p
{
	margin-top:1;
	margin-bottom:4;
}	
li p
{
	margin-top:2;
	margin-bottom:2;
}
div.seeAlsoNoToggleSection dl
{
	margin-top:8;
	margin-bottom:1;
	padding-left:1;
}
div.seeAlsoNoToggleSection dd p
{
	margin-top:2;
	margin-bottom:8;
}
div.section dl
{
	margin-top:8;
	margin-bottom:1;
	padding-left:1;
}
div.section dd p
{
	margin-top:2;
	margin-bottom:8;
}

div.code table
{
	border: 0;
	font-size: 95%;
	margin-bottom: 5;
	margin-top:-.4em;
	width: 100%
}

div.code table th
{	
	background:	#EFEFF7;
	border-bottom-color: #C8CDDE;
	border-bottom-style: solid;
	border-bottom-width: 1;
	color: #000066;
	font-weight: bold;
	padding-left: 5;
	padding-right: 5;
}

div.code table td
{
	background:	#F7F7FF;
	border-top-color: #FFFFFF;
	border-top-style: solid;
	border-top-width: 1;
	padding-left: 5;
	padding-right: 5;
	padding-top: 5;
}

span#runningHeaderText
{
	color: #8C8C8C;
	font-size: 90%;
	padding-left: 13;
}

span#nsrTitle
{
	color: #000000;
	font-size: 160%;
	font-weight: 400;
	font-family: arial;
}

div#footer
{
	font-size: 80%;
	margin-top:	0;
	margin-bottom:	0;
	margin-left:	0;
	margin-right:	0;
	padding-top:	8;
	padding-bottom:	6;
	padding-left:	1;
	padding-right:	1;
	width:	100%;
}

html&gt;body div#footer
{
	font-size: 80%;
	margin-top:	0;
	margin-bottom:	0;
	margin-left:	0;
	margin-right:	0;
	padding-top:	2;
	padding-bottom:	6;
	padding-left:	1;
	padding-right:	1;
	width:	98%;
}

div.seeAlsoNoToggleSection
{
	margin-left:0;
	padding-top:	2;
	padding-bottom:	2;
	padding-left:	0;
	padding-right:	15;
	width:	100%;
}

div.section
{
	margin-left:0;
	padding-top:	0;
	padding-bottom:	0;
	padding-left:	16;
	padding-right:	15;
	width:	100%;
}
html&gt;body div.section
{
	margin-left:0;
	padding-top:	2;
	padding-bottom:	2;
	padding-left:	16;
	padding-right:	15;
	width:	97%;
}
div.seeSection
{
	margin-left:0;
	padding-top:	0;
	padding-bottom:	2;
	padding-left:	16;
	padding-right:	15;
	width:	100%;
}

.heading
{
	font-weight:	bold;
	margin-top:		18;
	margin-bottom:	8;
}

h1.heading
{
	color: #000000;
	font-size:	130%;
}

.subHeading
{
	font-weight:	bold;
	margin-bottom:	4;
}
.procedureSubHeading
{
	font-weight: bold;
	margin-bottom: 4;
}

h3.subHeading
{
	color:  #000000;
	font-size: 120%;
    font-weight:800;
}

h3.procedureSubHeading
{
	color: #000000;
	font-size: 120%;
}

h4.subHeading
{
	color: #000000;
	font-size: 110%;
	font-weight:800;
}
span.labelheading, div.labelheading
{
	font-size:100%;
	color:#003399;
}

img.note
{
	border: 0;
	margin-right: 3;
}

div#mainSection table
{
	border: 0;
	font-size: 100%;
	width:	98.9%;
	margin-top: 5px;
	margin-bottom: 5px;
}

div#mainSection table tr
{
	vertical-align: top;
}

div#mainSection table th
{
	background-color: #EFEFF7;
	border-bottom: 1px solid #C8CDDE;
	border-left: 1px none #D5D5D3;
	color: #000066;
	padding-left: 5px;
	padding-right: 5px;
	text-align: left;
}

div#mainSection table td
{
	background-color: #F7F7FF;
	border-bottom: 1px solid #D5D5D3;
	border-left: 1px none #D5D5D3;
	padding-left: 5px;
	padding-right: 5px;
}

div#mainSection table td.imageCell
{
	white-space: nowrap;
}

div.code table
{
	border: 0;
	font-size: 95%;
	margin-bottom: 5;
	width: 100%
}

div.code table th
{	
	background:	#EFEFF7;
	border-bottom-color: #C8CDDE;
	border-bottom-style: solid;
	border-bottom-width: 1;
	color: #000066;
	font-weight: bold;
	padding-left: 5;
	padding-right: 5;
}

div.code table td
{
	background:	#F7F7FF;
	border-top-color: #FFFFFF;
	border-top-style: solid;
	border-top-width: 1;
	padding-left: 5;
	padding-right: 5;
	padding-top: 5;
}

div.alert table
{
	border: 0;
	font-size: 100%;
	width:	100%;
}

div.alert table th
{
	background:	#EFEFF7;
	border-bottom-width: 0;
	color: #000066;
	padding-left: 5;
	padding-right: 5;
}

div.alert table td
{
	background:	#F7F7FF;
	border-top-color: #FFFFFF;
	border-top-style: solid;
	border-top-width: 1;
	padding-left: 5;
	padding-right: 5;
}

div.code pre
{
	font-family:	Monospace, Courier New, Courier;
	font-size: 105%;
	color:	#000066;
	word-wrap:	break-word;
	background: #F7F7FF;
}

.tip
{
	color:	#0000FF;
	font-style: italic;
	cursor: pointer;
	text-decoration:underline;
}

.math
{
	font-family: Times New Roman;
	font-size: 125%
}

div.footerLine {
	margin: 0;
	width: 100%;
	padding-top:	8;
	padding-bottom:	6;
	/*padding-left:	5;
	padding-right:	2;*/

}

div.hr1 {
	margin: 0;
	width: 100%;
	height: 1px;
	padding: 0;
	background: #C8CDDE;
	font-size: 1px;
}

div.hr2 {
	margin: 0;
	width: 100%;
	height: 1px;
	padding: 0;
	background: #D4DFFF;
	font-size: 1px;
}

div.hr3 {
	margin: 0;
	width: 100%;
	height: 1px;
	padding: 0;
	background: #EEEEFF;
	font-size: 1px;
}

span.cs {
	display: none;
}

span.vb {
	display: none;
}

span.cpp {
	display: none;
}

span.nu {
	display: inline;
}

span.fs 
{
	display: none;
}

span.code {
	font-family:	Monospace, Courier New, Courier;
	font-size: 105%;
	color:	#000066; 
}
span.ui {
	font-weight: bold;
}
span.math {
	font-style: italic;
}
span.input {
	font-weight: bold;
}
span.term {
	font-style: italic;
}
span.label 
{
	font-weight: bold;
}
span.foreignPhrase {
	font-style: italic;
}
span.placeholder {
	font-style: italic;
}
span.keyword 
{
	font-weight: bold;
}
span.typeparameter
{
	font-style:italic;
}

div.caption
{
	font-weight: bold;
	font-size:100%;
	color:#003399;
}


div.code span.keyword 
{
	color: #871F78;
}

div.code span.parameter 
{
	font-style: italic;
}

div.code span.literal 
{
	color:#8B0000;
}

div.code span.comment 
{
	color: #006400;
}

span.syntaxLabel
{
	color:#0481DA;
	font-weight:bold;
}
span.introStyle
{
	color:DarkGray;
}

div.seeAlsoStyle
{
	padding-top:5px;

}

td.nsrBottom
{
	height: 0.6em;
	width: 100%;
}
  </style>
  </head>
  <body>
    <div id="header">
      <table id="bottomTable" cellpadding="0" cellspacing="0">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText" />
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">WindowsRuntimeComponentWP8</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td align="left" />
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <font color="DarkGray"></font>
        <p /> <div class="summary"><p>This sample shows you how to create and use Windows Runtime components in your Windows Phone 8 app.</p></div><div class="introduction"><p>The sample demonstrates the basics of how to create a Windows Phone Runtime component and consume it in your Windows Phone 8 app. A Windows Phone Runtime component is a Windows Runtime component that can run on the phone. The sample highlights three scenarios. The first scenario illustrates calling synchronous and asynchronous methods to perform a computation. The second scenario uses the same computation component to demonstrate progress reporting and cancelling long-running tasks. The third scenario demonstrates how to use a component to wrap logic that uses XAudio2 APIs to play a sound on the phone. </p><p>This sample shows you how to:</p><ul><li><p>Create a Windows Runtime component.</p></li><li><p>Implement an asynchronous API in your component.</p></li><li><p>Implement progress and cancellation in your component.</p></li><li><p>Consume Windows Runtime components in your XAML app.</p></li></ul><p /><p>For more info about the sample, see <span class="term">Sample description</span>.</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><b>Note:</b></th></tr><tr><td><p>The terms <span class="term">Windows Runtime component</span> and <span class="term">Windows Phone Runtime component</span> are used interchangeably throughout this document to refer to a Windows Runtime component that is created to use in a Windows Phone 8 app.</p></td></tr></table></div><h3 class="procedureSubHeading">Build the sample</h3><div class="subSection"><ol><li><p>Start Visual Studio Express 2012 for Windows Phone and select <span class="ui">File</span> &gt; <span class="ui">Open</span> &gt; <span class="ui">Project/Solution</span>.</p></li><li><p>Go to the directory in which you unzipped the sample. Double-click the Visual Studio Express 2012 for Windows Phone solution (<span class="label">.sln</span>) file.</p></li><li><p>Use <span class="ui">Build</span> &gt; <span class="ui">Rebuild Solution</span> to build the sample.</p></li></ol></div><p /><h3 class="procedureSubHeading">Run the sample</h3><div class="subSection"><ul><li><p>To debug the app and then run it, press F5 or use <span class="ui">Debug</span> &gt; <span class="ui">Start Debugging</span>. To run the app without debugging, press Ctrl+F5 or use <span class="ui">Debug</span> &gt; <span class="ui">Start Without Debugging</span>.</p></li></ul></div><p /><p><b>Sample description</b></p><p>This sample contains the following three projects.</p><ul class="nobullet"><li><p><span class="label">PhoneApp.</span> This is the XAML phone app written in C# that consumes the Windows Runtime components built in this sample. It consists of a Panorama page, on which each scenario is displayed using a separate <span sdata="langKeyword" value="PanoramaItem"><span class="keyword">PanoramaItem</span></span>.</p></li><li><p><span class="label">ComputeComponent_Phone.</span> This is a Windows Runtime component written in C++. The component exposes methods for performing some computations – one method adds two numbers, and another finds all prime numbers in a range. The actual computations are for illustration purposes only, to demonstrate the power of using Windows Phone Runtime components. The component was created in the solution by selecting <span class="ui">File</span> &gt; <span class="ui">New Project</span> &gt; <span class="ui">Visual C++</span> &gt; <span class="ui">Windows Phone</span> &gt; <span class="ui">Windows Phone Runtime Component</span>. You can create these projects only by using C++ in Windows Phone 8. </p></li><li><p><span class="label">AudioComponent_Phone.</span> This is a Windows Runtime component written in C++. The component exposes methods to play and stop a sound. It also has methods to suspend and resume the audio engine, which prevents unnecessary battery drain in your app when the sound isn’t needed. </p></li></ul><p><b>Creating a Windows Runtime component for Windows Phone </b></p><p>The following steps describe how to create a Windows Runtime component and then use it in your phone app. These components often are referred to as third-party Windows Runtime components, to distinguish them from the first-party Windows Runtime APIs that you get in the platform. In Windows Phone 8 we also refer to them as Windows Phone Runtime components because they are created using a project template specifically designed to use for Windows Phone 8 and can only be consumed by Windows Phone 8 apps. We’ll use these names interchangeably to refer to components written to use in your Windows Phone 8 app. Part of the output generated by these projects is a <span class="term">Windows metadata (.winmd)</span> file, which has the extension .winmd. This file contains the metadata required for all supported languages to consume the functionality you expose in your component.</p><p>Remember that Windows Phone 8 only supports creating Windows Runtime components in C++, but can be consumed by phone apps and other Windows Runtime components written in C++, C#, and Visual Basic.  The Visual Studio project template we use to create the Windows Phone Runtime component project sets up everything that’s required to create a .winmd file that you can consume in your app. In this example, we’ll assume the phone app that is consuming the component is a XAML app written in C#, but the steps also apply to apps written in Visual Basic or C++.</p><ol><li><p><span class="label">Create a Windows Phone Runtime component project and add it to your solution.</span> Right-click your solution in <span class="ui">Solution Explorer</span> and then select <span class="ui">Add</span> &gt; <span class="ui">New Project</span> &gt; <span class="ui">Windows Phone</span> &gt; <span class="ui">Windows Phone Runtime Component</span>. This creates a new project in your solution. Make sure you select the <span class="ui">Windows Phone Runtime Component</span> project template from the set of <span class="ui">Windows Phone</span> templates and not the Windows Runtime Component template from the set of <span class="ui">Windows Store</span> templates. A Windows Runtime Component template is not compatible with Windows Phone 8. </p></li><li><p><span class="label">Define the component classes, or API, that you want to expose to your app.</span> You need to define one or more classes to be able to use your new component in your app. Because Windows Runtime components can be consumed by multiple languages, the types visible to the consumer of the component are restricted to those that can be published in the .winmd file. For example, types must be declared in a namespace and must be declared as <span sdata="langKeyword" value="public"><span class="keyword">public</span></span>. These classes, or types, must also be declared as a <span sdata="langKeyword" value="ref"><span class="keyword">ref</span></span> class and declared as <span sdata="langKeyword" value="sealed"><span class="keyword">sealed</span></span> because inheritance is not allowed. To learn about the complete type system and limitations on public types your component can expose, see <a href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/hh699871(v=vs.105).aspx">Visual C++ Language Reference (C++/CX)</a>.</p><p><span class="label">Implement the interface.</span> Although there are restrictions for the types that are visible from your component, you have a lot more freedom in what you use privately inside your component. This way you can use Win32, COM, XAudio2, and Direct3D APIs inside the component to implement features and functionality that you want to use in your Windows Phone app. In this sample, we use XAudio2 APIs to play sound. We create a Windows Runtime component that implements a class with methods such as <span class="label">PlaySound</span> and <span class="label">StopSound</span>. Inside the component, we call in to the powerful XAudio2 APIs to do the heavy lifting. To use these APIs we need to reference the correct header files and link to xaudio2.lib. To call XAudio2 APIs, add <span class="label">xaudio2.lib</span> to the list of <span class="ui">Additional Dependencies</span> in the <span class="ui">Property Pages</span> dialog of your component’s project, and include xaudio2.h in your pch.h header file. Remember to add the library to the Additional Dependencies for each project configuration – <span class="label">Debug, Release</span>, etc.</p></li><li><p><span class="label">Reference the component from your phone app project.</span> To use your component in your app, you’ll need to add a reference in your phone app project for that component. In <span class="ui">Solution Explorer</span>, right-click your main project, and then click  <span class="ui">Add Reference</span>. In the <span class="ui">Add Reference</span> dialog, in the left pane click <span class="ui">Solution</span>. Your new Windows Runtime component now appears in the center pane of the dialog. In the Name column, select the project you want to reference. Click <span class="ui">OK</span> to finish adding the reference to your project. When you expand the list of references in your project you’ll now see a reference to your component. Build your solution to verify that everything compiles correctly.  </p></li><li><p><span class="label">Build, test, validate.</span> As you develop your component be sure you regularly build the solution and test the functionality as you proceed. You can also debug your component and step through its logic to make sure works as expected. If your phone app is written in C# or Visual Basic, you can still debug the native code of your Windows Runtime component by selecting <span class="ui">Native Only</span> for the <span class="ui">Debugger Type</span> setting in the <span class="ui">Debug</span> properties of your Windows Phone app. You can’t debug native code and managed code at the same time, so use this setting to toggle between native and managed code debugging. </p></li></ol><p><b>See also</b></p><ul><li><p><a href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj714080(v=vs.105).aspx">Share using Windows Runtime Components</a></p></li><li><p><a href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj206944(v=vs.105).aspx">Native audio APIs for Windows Phone 8</a></p></li><li><p><a href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/hh441572.aspx">Creating Windows Runtime Components</a></p></li><li><p><a href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/hh699871(v=vs.110).aspx">Visual C++ Language Reference (C++/CX)</a></p></li></ul></div></div>
      <div id="footer">
        <div class="footerLine" />
      </div>
      <p />
    </div>
  </body>
</html>