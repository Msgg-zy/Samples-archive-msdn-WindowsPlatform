
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//

// For details on localizing a Windows app, see: http://go.microsoft.com/fwlink/?LinkId=212836

{

// App manifest resources.
    // All values of the token string created for the DisplayName element in the package manifest must match 
    // the names that you’ve reserved for the app at the Windows Store. Otherwise, a validation error will occur 
    // when you upload the package to the Store.
    "displayName"                       : "HTML and JavaScript controls",
    "_displayName.comment"              : "App display name",

    "description"                       : "A gallery of HTML and JavaScript controls.",
    "_description.comment"              : "App description",

    "shortName"                         : "HTMLcntrls",
    "_shortName.comment"                : "Must be less than 13 characters and should be an abbreviation for the displayName",
// End app manifest resources.




    "SampleTitle": "HTML and JavaScript controls",
	"AppDescription" : "This gallery shows controls you can use to build the UI for your app following the best practices as described in the UX guidelines. Feel free to browse around. We've grouped related controls together, and you can also browse the full list by name.",

    "Hero": "Introduction",

	"ControlsByFunctionTitle": "Controls by function", 
	"DocumentationSectionTitle": "Documentation",


	"commandsCategoryTitle": "App bars and commands",
	"commandsCategoryShortDesc": "Use app bars to present commands and tools to users.",
	"commandsCategoryfullDesc": "Use app bars to present commands and tools to users.",

	"buttonsCategoryTitle": "Buttons",
	"buttonsCategoryShortDesc": "Use button controls to let users perform an action, like submitting a form or showing a menu.",
	"buttonsCategoryfullDesc": "Use button controls to let users perform an action, like submitting a form or showing a menu.",

	"collectionsCategoryTitle": "Collection/data controls",
	"collectionsCategoryShortDesc": "Use collection controls to display collections of data and media.",
	"collectionsCategoryfullDesc": "Use collection controls to display collections of data and media.",

	"flyoutsCategoryTitle": "Flyout and menu controls",
	"flyoutsCategoryShortDesc": "Use flyout and menu controls to show or collect contextual info.",
	"flyoutsCategoryfullDesc": "Use flyout and menu controls to show or collect contextual info.",

	"layoutsCategoryTitle": "Layout controls",
	"layoutsCategoryShortDesc": "Use layout controls to arrange the content and controls in your app.",
	"layoutsCategoryfullDesc": "Use layout controls to arrange the content and controls in your app.",

	"navigationCategoryTitle": "Navigation controls",
	"navigationCategoryShortDesc": "Use navigation controls to navigate between different pages of your app.",
	"navigationCategoryfullDesc": "Use navigation controls to navigate between different pages of your app.",

	"progressCategoryTitle": "Progress controls",
	"progressCategoryShortDesc": "Use progress controls to graphically represent ongoing activity or the progress of a task.",
	"progressCategoryfullDesc": "Use progress controls to graphically represent ongoing activity or the progress of a task.",

	"selectionCategoryTitle": "Selection controls",
	"selectionCategoryShortDesc": "Use selection controls to let a user set a value or choose between multiple options.",
	"selectionCategoryfullDesc": "Use selection controls to let a user set a value or choose between multiple options.",

	"searchCategoryTitle": "Search controls",
	"searchCategoryShortDesc": "Use search controls to let a user search your app's content.",
	"searchCategoryfullDesc": "Use search controls to let a user search your app's content.",

    "DescriptionText": "Description text:",

    "CopyButtonText": "Copy",

    "ButtonsSectionTitle" : "Buttons",
    "ButtonsSectionDescription" : "Buttons respond to user input from a touch, mouse, keyboard, style, or other input devices. There are several types of buttons.",
    
    "ButtonPageTitle": "Standard button",
    "ButtonTitle": "Button",
	"ButtonControlName": "button",
    "ButtonControlDescription": "The button responds to user input from a touch, mouse, keyboard, stylus, or other input device.",
    "StandardButtonExampleTitle": "Handling the click event",
    "StandardButtonExample": "This example creates a standard button and a click event handler.",
    "ButtonStylingTitle": "Styling buttons",
    "ButtonStylingDescription": "Here's a button with custom styling.",
    "ButtonImgTitle": "A button with graphical content",
    "ButtonImgDescription": "This example creates a button that has an image as its content.",
    "FormButtonTitle": "Submit and reset buttons",
    "FormButtonDescription": "Use submit button to submit data in a form and the reset button to clear the form. ",

    "FormButtonPageTitle" : "Submit and reset buttons",
	"FormButtonControlName" : "input type=\"submit\", input type=\"reset\"",
    "SubmitButtonTitle": "Submit button",
	"SubmitButtonControlName": "input type=\"submit\"",
    "SubmitButtonDescription": "This example shows how to use use a submit button to submit the data entered in a form's controls. ",
    "ResetButtonTitle": "Reset button",
    "ResetButtonDescription": "This example uses a reset button to reset the input elements in a form to their initial values.",


    "RadioButtonTitle" : "Radio button",
	"RadioButtonControlName": "input type=\"radio\"",
    "RadioButtonDescriptionShort" : "Radio buttons let users select one option from two or more choices. ",
    "RadioButtonDescription" : "Radio buttons let users select one option from two or more choices. Each option is represented by one radio button; a user can select only one radio button in a radio button group. A radio button has two states: checked and not checked. ",
    "RadioButtonExampleDescription" : "This example creates a group of three radio buttons. ",


    "SelectionSectionTitle" : "Selection controls",

    "Checkboxtitle" : "Checkboxes",
	"CheckboxControlName": "input type=\"checkbox\"",
    "CheckboxDescription" : "A checkbox is a control that the user can check or uncheck by tapping, clicking, or pressing the space bar on the keyboard. Most checkboxes have two states, checked and unchecked, but some checkboxes support a third, indeterminate state.  ",
    "CheckboxDescriptionShort" : "A checkbox is a control that the user can check or uncheck by tapping, clicking, or pressing the space bar on the keyboard.",

	"CheckboxExample1Title" : "Standard checkboxes",
    "CheckboxExample1Description" : "A set of four checkboxes.",
    "CheckboxExample2Title" : "Indeterminate checkboxes",
    "CheckboxExample2Description" : "When an option applies to more than one object, you can use a checkbox to indicate whether the option applies to all, some, or none of those objects. When the option applies to some, but not all, of those objects, use the checkbox's indeterminate state to represent a mixed choice. ",

    "SelectTitle" : "Select control",
	"SelectControlName": "select",
	"SelectDescriptionShort" : "With the select control users can select a value, or multiple values, from a set of items with text labels.",
    "SelectDescription" : "With the select control users can select a value, or multiple values, from a set of items with text labels. The select control has two modes of operation: drop-down list mode and list box mode.",
    "SelectDropDownTitle" : "The Select control in drop-down (flyout) mode",
    "SelectDropDownDescription" : "In drop-down mode (also known as flyout mode), the select control conserves on-screen space by showing only the currently-selected item. ",
    "SelectInlineTitle" : "The Select control in list box (inline) mode",
    "SelectInlineDescription" : "To put the Select control into inline mode, set the size attribute. ",
    "SelectMultipleTitle" : "The Select control in list box (inline) mode that supports multi-selection",
    "SelectMultipleDescription" : "Use the multiple attribute to create a Select control that supports multi-selection. ",

    "RangeTitle" : "Range/slider",
	"RangeControlName": "input type=\"range\"",
	"RangeDescriptionShort": "Use a range control when you want your users to be able to set defined, contiguous values or a range of discrete values.",
    "RangeDescription" : "Use a range control (also known as a slider) when you want your users to be able to set defined, contiguous values (such as volume or brightness) or a range of discrete values (such as screen resolution settings).",
    "RangeBasicTitle" : "The range control",
    "RangeBasicDescription" : "A simple range control.",
    "RangeVerticalTitle" : "Vertical range control",
    "RangeVerticalDescription" : "A vertical range control.",

    "RepeaterTitle" : "Repeater",
	"RepeaterControlName": "WinJS.UI.Repeater",
	"RepeaterApiName" : "WinJS.UI.Repeater",
	"RepeaterDescriptionShort": "The Repeater uses a template to generate HTML markup from a set of data. ",
    "RepeaterDescription" : "The Repeater is a simple, easy-to-use Windows Library for JavaScript control that uses a template to generate HTML markup from a set of data. The template can contain nearly any HTML markup and Windows Library for JavaScript controls. You can even nest Repeater controls inside Repeater controls!",
    "RepeaterBasicTitle" : "Create a Repeater",
    "RepeaterBasicDescription" : "This example creates a WinJS.Binding.List, a WinJS.Binding.Template, and a WinJS.UI.Repeater.",

    "SearchTitle" : "SearchBox",
	"SearchControlName" : "WinJS.UI.SearchBox",
	"SearchApiName" : "WinJS.UI.SearchBox",
	"SearchDescriptionShort": "Lets the user perform search queries and see search suggestions.",
    "SearchDescription" : "The search box provides the UI for performing searches and showing suggestions. The search box supports app-supplied search suggestions and results, app-specific search history, and full support for touch, keyboard, and mouse interactions.",
    "SearchBasicTitle" : "Create a SearchBox",
    "SearchBasicDescription" : "This example creates a SearchBox. (For a complete example that shows how to handle queries and display results, see the source code for this sample.) ",


    "ProgressTitle" : "Progress controls",
	"ProgressControlName" : "progress",
    "ProgressDescription" : "Progress controls provide a way for you to indicate that your app is performing work, such as downloading images, loading files, or processing data. ",
    "ProgressDeterminateTitle" : "The determinate progress bar",
    "ProgressDeterminateDescription" : "Use the determinate progress bar style when a task is determinate, that is when it has a well-defined duration or a predictable end.",
    "ProgressIndeterminateBarTitle" : "The indeterminate progress bar",
    "ProgressIndeterminateBarDescription" : "Use this style for tasks that are not determinate and are modal (block user interaction). ",
    "ProgressIndeterminateRingTitle" : "The indeterminate progress ring",
    "ProgressIndeterminateRingDescription" : "Use this style for tasks that are not determinate that are non-modal (don't block user interaction). ",

    "FileUploadTitle" : "File upload control",
	"FileUploadControlName" : "input type=\"file\"",
    "FileUploadDescription" : "The file upload control enables the user to select one or more files for upload.",
    "FileUploadExampleTitle" : "Upload a single file",
    "FileUploadExampleDescription" : "This example creates a file upload object that accepts a single image. ",
    "FileUploadMultipleTitle" : "Upload multiple files",
    "FileUploadMultipleDescription" : "This example creates a file upload object that accepts multiple files. ",

    "FileUploadStylingTitle" : "Custom styling",
    "FileUploadStylingDescription" : "This example uses CSS to style the file upload control.",

    "ItemContainerTitle": "ItemContainer",
	"ItemContainerControlName": "WinJS.UI.ItemContainer",
    "ItemContainerApiName": "WinJS.UI.ItemContainer",
    "ItemContainerDescription": "Use an ItemContainer to create interactive elements that provide swipe, drag-and-drop, and hover functionality",
    "ItemContainerExampleTitle": "Create an ItemContainer",
    "ItemContainerExampleDescription": "This example creates two ItemContainer objects and sets their tapBehavior property to toggleSelect so that they can be selected.",


    "MenuGroupTitle": "Menus and commands",

    "MenuTitle": "Menu",
	"MenuControlName": "WinJS.UI.Menu",
    "MenuApiName": "WinJS.UI.Menu",
    "MenuDescription": "Menus present a set of commands to the user. They appear when the user clicks a button or other triggering command.",
    "MenuExampleTitle": "Create a basic menu",
    "MenuExampleDescription": "This example defines a simple menu that appears when the user clicks a button.",

    "FlyoutTitle": "Flyout",
	"FlyoutControlName": "WinJS.UI.Flyout",
    "FlyoutApiName": "WinJS.UI.Flyout",
    "FlyoutDescription": "Displays a dialog for collecting information or providing warnings and confirmations.",
    "FlyoutExampleTitle": "Create a basic Flyout",
    "FlyoutExampleDescription": "This example defines a simple flyout that appears when the user clicks a button.",

    "BackButtonTitle": "BackButton",
	"BackButtonControlName": "WinJS.UI.BackButton",
    "BackButtonApiName": "WinJS.UI.BackButton",
    "BackButtonDescription": "Provides backwards navigation in the form of a button. ",
    "BackButtonExampleTitle": "Create a BackButton",
    "BackButtonExampleDescription": "This example creates a BackButton.",

    "ContextMenuTitle": "Context menu",
    "ContextMenuPageTitle": "Context menu (Windows.UI.Popups.PopupMenu)",
	"ContextMenuControlName": "Windows.UI.Popups.PopupMenu",
    "ContextMenuApiName": "Windows.UI.Popups.PopupMenu",
    "ContextMenuDescriptionShort": "A lightweight menu that gives users immediate access to actions on text or UI objects in Windows Store apps.",
	"ContextMenuDescription": "A lightweight menu that gives users immediate access to actions (like clipboard commands) on text or UI objects in Windows Store apps. To create a context menu, you use the Windows.UI.Popups.PopupMenu object.  ",     
	"ContextMenuExampleTitle": "Create a context menu",
    "ContextMenuExampleDescription": "This example uses a PopupMenu object to create a context menu. Right-click the image to show a simple context menu. Using touch, the press-and-hold gesture will also trigger the context menu.",

    "FlipViewTitle": "FlipView",
	"FlipViewControlName": "WinJS.UI.FlipView",
    "FlipViewPageTitle": "WinJS.UI.FlipView",
    "FlipViewApiName": "WinJS.UI.FlipView",
    "FlipViewDescription": "Lets the user flip through a collection of items, one at a time. It's great for displaying a gallery of images.   ",
    "FlipViewExampleTitle": "Create a FlipView",
    "FlipViewExampleDescription": "This example creates a FlipView, a Template, and a data source.",

    "ListViewTitle": "ListView",
    "ListViewPageTitle": "WinJS.UI.ListView",
	"ListViewControlName": "WinJS.UI.ListView",
    "ListViewApiName": "WinJS.UI.ListView",
    "ListViewDescription": "Displays data in a customizable list or grid.",
    "ListViewExampleTitle": "Create a ListView",
    "ListViewExampleDescription": "This example creates a ListView, a Template, and a data source.",

    "SemanticZoomTitle": "SemanticZoom",
    "SemanticZoomPageTitle": "WinJS.UI.SemanticZoom",
	"SemanticZoomControlName": "WinJS.UI.SemanticZoom",
    "SemanticZoomApiName": "WinJS.UI.SemanticZoom",
    "SemanticZoomDescriptionShort": "Enables the user to zoom between two different views supplied by two child controls. One child control supplies the zoomed-out view and the other provides the zoomed-in view. ",
	"SemanticZoomDescription": "Enables the user to zoom between two different views supplied by two child controls.",    
	"SemanticZoomExampleTitle": "Create a SemanticZoom",
    "SemanticZoomExampleDescription": "This example creates a SemanticZoom. The zoomed-in and zoomed-out views are provided by two ListView controls.",

    "DatePickerTitle": "DatePicker",
    "DatePickerPageTitle": "WinJS.UI.DatePicker",
	"DatePickerControlName": "WinJS.UI.DatePicker",
    "DatePickerApiName": "WinJS.UI.DatePicker",
    "DatePickerDescriptionShort": "Enables the user to select a date.",
    "DatePickerDescription": "If you need to allow users to set a date in your application, for example to schedule an appointment or set the expiration date on a credit card, you can use a DatePicker, which is a part of the Windows Library for JavaScript. The DatePicker displays three controls for month, date, and year. These controls are easy to use with touch support, and they can be styled and configured in several different ways.",
    "DatePickerExampleTitle": "Create a DatePicker",
    "DatePickerExampleDescription": "This example creates a DatePicker.",
    "DatePickerStyleExampleTitle": "Styling a DatePicker",
    "DatePickerStyleExampleDescription": "This example uses CSS to style a DatePicker.",

    "TimePickerTitle": "TimePicker",
    "TimePickerPageTitle": "WinJS.UI.TimePicker",
	"TimePickerControlName": "WinJS.UI.TimePicker",
    "TimePickerApiName": "WinJS.UI.TimePicker",
    "TimePickerDescriptionShort": "Enables the user to select a time.",
    "TimePickerDescription": "If you need to allow users to set a time in your application, for example to schedule an appointment, you can use a TimePicker, which is a part of the Windows Library for JavaScript. The TimePicker displays three controls for month, date, and year. These controls are easy to use with touch support, and they can be styled and configured in several different ways.",
    "TimePickerExampleTitle": "Create a TimePicker",
    "TimePickerExampleDescription": "This example creates a TimePicker.",
    "TimePickerStyleExampleTitle": "Styling a TimePicker",
    "TimePickerStyleExampleDescription": "This example uses CSS to style a TimePicker.",

	"WebViewTitle": "WebView",
    "WebViewPageTitle": "WebView",
	"WebViewControlName": "x-ms-webview",
    "WebViewApiName": "x-ms-webview",
    "WebViewDescriptionShort": "Hosts web content in your app.",
    "WebViewDescription": "The WebView control makes it easy to host web-based content in your app. The WebView control provides better content isolation and navigation functionality than an iframe.",
    "WebViewExampleTitle": "Create a WebView",
    "WebViewExampleDescription": "This example creates a WebView control. To load a page, enter an web address in the text box and click Load.",


    "HubTitle": "Hub",
    "HubPageTitle": "WinJS.UI.Hub",
	"HubControlName": "WinJS.UI.Hub",
    "HubApiName": "WinJS.UI.Hub",
    "HubDescriptionShort": "Creates a hub navigation pattern consisting of sections that can be navigated to.",
    "HubDescription": "Many Windows Store apps use the hub navigation pattern, a hierarchical system of navigation. This pattern is best for apps with large content collections or many distinct sections of content for a user to explore. The essence of hub design is the separation of content into different sections and different levels of detail. Hub pages are the user's entry point to the app. Here content is displayed in a horizontally or vertically panning view that enables users to get a glimpse of what's new and available. The hub consists of different categories of content, each of which maps to the app's section pages. Each section should bubble up content or functionality. The hub should offer a lot of visual variety, engage users, and draw them in to different parts of the app. ",
    "HubExampleTitle": "Create a Hub",
    "HubExampleDescription": "This example creates a Hub. For a more complete example, see the /pages/hub/ folder in this sample's source code.",

    "AppBarTitle": "AppBar",
    "AppBarPageTitle": "WinJS.UI.AppBar",
	"AppBarControlName": "WinJS.UI.AppBar",
    "AppBarApiName": "WinJS.UI.AppBar",
    "AppBarDescriptionShort": "Provides a toolbar for displaying app-specific commands. ",
    "AppBarDescription": "Use AppBar controls to present commands and tools. AppBar controls are hidden by default and appear when you swipe a finger from the bottom or top edge of the screen. They cover the content of the app and can be dismissed by the user with an edge swipe, or by interacting with the application. AppBar controls automatically respond to the edge swipe and can be shown or hidden programmatically.",
    "AppBarExampleTitle": "Create a AppBar",
    "AppBarExampleDescription": "This example creates an AppBar. Click the button to show or hide the AppBar. (Because this app already has an AppBar, right clicking, swiping, or pressing Windows + Z shows the app's main AppBar, not the example.) ",
	"AppBarExampleDescriptionCode1": "Here's the HTML for the show/hide button and the AppBar control. ",
	"AppBarExampleDescriptionCode2": "Here's the JavaScript for the example.",

    "NavBarTitle": "NavBar",
    "NavBarPageTitle": "WinJS.UI.NavBar",
	"NavBarControlName": "WinJS.UI.NavBar",
    "NavBarApiName": "WinJS.UI.NavBar",
    "NavBarDescriptionShort": "Provides a toolbar for displaying app-specific commands. ",
    "NavBarDescription": "Use NavBar controls to present navigation commands. NavBar controls are hidden by default and appear when you swipe a finger from the bottom or top edge of the screen. They cover the content of the app and can be dismissed by the user with an edge swipe, or by interacting with the application. NavBar controls automatically respond to the edge swipe and can be shown or hidden programmatically.",
    "NavBarExampleTitle": "Create a NavBar",
    "NavBarExampleDescription": "This example creates an NavBar. Click the button to show or hide the NavBar. (Because this app already has an NavBar, right clicking, swiping, or pressing Windows + Z shows both the main NavBar and the example NavBar.) ",
	"NavBarExampleDescriptionCode1": "Here's the HTML for the show/hide button and the NavBar control. ",
	"NavBarExampleDescriptionCode2": "Here's the JavaScript for the example.",

    "GridLayoutTitle": "Grid layout",
    "GridLayoutPageTitle": "CSS Grid layout",
	"GridLayoutControlName": "-ms-grid, -ms-inline-grid, -ms-grid-columns, -ms-grid-rows",
    "GridLayoutApiName": "-ms-grid, -ms-grid-columns, -ms-grid-rows",
    "GridLayoutDescriptionShort": "Arranges elements into columns and rows.",
    "GridLayoutDescription": "The CSS3 Grid layout aligns elements into columns and rows. It enables you to divide space for major regions of your app, and to define the relationship between parts of an HTML control in terms of size, position, and layer. This removes the need to create a fixed layout. ",
    "GridLayoutDescription2": "The basic building block of Grid Layout is the Grid element, which is declared by setting the display property of an element to either -ms-grid (for a block-level Grid element) or -ms-inline-grid (for an inline-level Grid element). ",
	"GridLayoutExampleTitle": "Create a Grid layout",
    "GridLayoutExampleDescription": "This example creates a Grid layout that has four columns and two rows. ",

	"FlexboxTitle": "Flexbox layout",
    "FlexBoxPageTitle": "CSS Flexbox layout",
	"FlexBoxControlName": "-ms-flexbox, -ms-flex-direction, -ms-flex-align, -ms-flex",
    "FlexBoxApiName": "-ms-flexbox, -ms-flex-direction, -ms-flex-align, -ms-flex",
    "FlexBoxDescriptionShort": "The Flebox layout arranges and sizes elements using a constraint-based system that supports both relative flexible sizing and intrinsic sizing.",
    "FlexBoxDescription": "The Flebox layout arranges and sizes elements using a constraint-based system that supports both relative flexible sizing and intrinsic sizing. Flexible Box layouts can adapt to multiple screen sizes and enable digital newspaper, magazine, and other digital print media consumptive scenarios. It's especially useful for making the relative position and size of elements stay constant, even as screen and browser window sizes vary and change. Flexbox can lessen the reliance on floats, which are more complicated to position and size correctly.",
    "FlexBoxDescription2": "A Flexbox layout takes the available space into account when defining box dimensions, which enables relative sizes and positioning. For example, you can ensure that extra whitespace in a browser window is equally distributed to the size of multiple child elements, and that those child elements are centered in the middle of the containing block.",
	"FlexBoxDescription3": "To create a Flexbox layout, you must first create a Flexbox container. Do this by setting the display property of an element to either \"-ms-flexbox\" (for a block-level flexbox container) or \"-ms-inline-flexbox\" (for an inline flexbox container).",	
	"FlexBoxExampleTitle": "Create a Flexbox layout",
    "FlexBoxExampleDescription": "This example creates a Flexbox layout that contains four child elements. ",

	"MultiColumnTitle": "Multi-column layout",
    "MultiColumnPageTitle": "CSS Multi-column layout",
	"MultiColumnControlName": "column-width, column-count",
    "MultiColumnApiName": "column-width, column-count",
    "MultiColumnDescriptionShort": "Displays content in multiple columns.  ",
    "MultiColumnDescription": "A multi-column layout enables content to be flowed into multiple columns, which retain a gap and an optional rule between them. It also makes it possible to vary the number of columns based on the size of the window. A multi-column element is defined by the W3C as an element whose column-width or column-count property is not auto and therefore acts as a container for multi-column layout. ",
    "MultiColumnDescription2": "Multi-column layout introduces the column box, which is defined as a new type of container between the content box and the content. Multi-column elements can have multiple rows of column boxes. Rows are divided by column spanning elements (elements that have column-span:all specified). Rows are ordered in the direction of the multi-column element. Adjacent column boxes are separated by a column gap, which can optionally contain a column rule. ",
	"MultiColumnExampleTitle": "Create a multi-column layout using the column-count property",
    "MultiColumnExampleDescription": "This example uses the column-count property to create a multi-column layout. ",
	"MultiColumnExample2Title": "Create a multi-column layout using the column-width property",
    "MultiColumnExample2Description": "This example uses the column-width property to create a multi-column layout. ",

	"RegionLayoutTitle": "Regions",
    "RegionLayoutPageTitle": "CSS Regions",
	"RegionLayoutControlName": "-ms-flow-into, -ms-flow-from",
    "RegionLayoutApiName": "-ms-flow-into, -ms-flow-from",
    "RegionLayoutDescriptionShort": "Displays an HTML content stream in one or more containers in an HTML template.  ",
    "RegionLayoutDescription": "CSS Regions page layout feature lets you take a single content stream and segment that stream into multiple empty containers in an HTML template. HTML templates are documents that are largely empty of original content, and are instead composed primarily of empty containers that are sized and positioned to give incoming content a specific layout. You can use regions to flow text across multiple columns that are explicitly sized and positioned using Cascading Style Sheets (CSS), creating a newspaper or magazine-style layout.",
   	"RegionLayoutExampleTitle": "Use CSS Regions to flow content",
    "RegionLayoutExampleDescription": "This example uses CSS Regions to flow content from once source into six containers. ",


    "AllControlsSectionTitle" : "Alphabetical list"




}