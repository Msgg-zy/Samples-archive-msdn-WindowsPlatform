/* 
    Copyright (c) 2012 - 2013 Microsoft Corporation.  All rights reserved.
    Use of this sample source code is subject to the terms of the Microsoft license 
    agreement under which you licensed this sample source code and is provided AS-IS.
    If you did not accept the terms of the license agreement, you are not authorized 
    to use this sample source code.  For the terms of the license, please see the 
    license agreement between you and Microsoft.
  
    To see all Code Samples for Windows Phone, visit http://code.msdn.microsoft.com/wpapps
  
*/
namespace sdkImages.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class AppResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal AppResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("sdkImages.Resources.AppResources", typeof(AppResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to after (MB).
        /// </summary>
        public static string AfterUpdateCaption {
            get {
                return ResourceManager.GetString("AfterUpdateCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to info.
        /// </summary>
        public static string AppBarButtonInfoText {
            get {
                return ResourceManager.GetString("AppBarButtonInfoText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to sdkImageRecipes.
        /// </summary>
        public static string ApplicationTitle {
            get {
                return ResourceManager.GetString("ApplicationTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to maintain aspect ratio.
        /// </summary>
        public static string AspectRatioCaption {
            get {
                return ResourceManager.GetString("AspectRatioCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to before (MB).
        /// </summary>
        public static string BeforeUpdateCaption {
            get {
                return ResourceManager.GetString("BeforeUpdateCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cancel download.
        /// </summary>
        public static string CancelDownloadButtonCaption {
            get {
                return ResourceManager.GetString("CancelDownloadButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DecodePixelHeight:.
        /// </summary>
        public static string DecodePixelHeightCaption {
            get {
                return ResourceManager.GetString("DecodePixelHeightCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DecodePixelWidth: .
        /// </summary>
        public static string DecodePixelWidthCaption {
            get {
                return ResourceManager.GetString("DecodePixelWidthCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to download.
        /// </summary>
        public static string DownloadButtonCaption {
            get {
                return ResourceManager.GetString("DownloadButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to download with cancel.
        /// </summary>
        public static string DownloadCancelButtonCaption {
            get {
                return ResourceManager.GetString("DownloadCancelButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WebClient class is used in order to demonstrate the CancelAsync method, which allows the download to be cancelled. If the download happens too quickly, you can slow it down using the Simulation Dashboard. Once the image is downloaded it is cached internally by the phone. To test this scenario again, clear the internal cache by restarting the emulator..
        /// </summary>
        public static string DownloadCancelHelpText {
            get {
                return ResourceManager.GetString("DownloadCancelHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to download &amp; cancel.
        /// </summary>
        public static string DownloadCancelPageTitle {
            get {
                return ResourceManager.GetString("DownloadCancelPageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This scenario shows how to download and image and give the user some visual feedback using a progress bar. If the download happens to quickly, you can slow it down using the Simulation Dashboard. Once the image is downloaded it is cached internally by the phone. To test this scenario again, clear the internal cache by restarting the emulator..
        /// </summary>
        public static string DownloadHelpText {
            get {
                return ResourceManager.GetString("DownloadHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to download.
        /// </summary>
        public static string DownloadPageTitle {
            get {
                return ResourceManager.GetString("DownloadPageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to downsample.
        /// </summary>
        public static string DownsampleButtonCaption {
            get {
                return ResourceManager.GetString("DownsampleButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To downsample an image and reduce its size, set the image&apos;s DecodePixelWidth  and DecodePixelHeight properties before loading it. When you don&apos;t use these properties, the application consumes unnecessary resources by caching the image at its original size and not at the smaller size that is displayed. To preserve aspect ratio, set one of these properties but not both. The DecodePixelHeight and DecodePixelWidth are displayed in the dph and dpw fields respectively. Observe the memory reduction given in the Af [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DownsampleHelpText {
            get {
                return ResourceManager.GetString("DownsampleHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to downsample.
        /// </summary>
        public static string DownsamplePageTitle {
            get {
                return ResourceManager.GetString("DownsamplePageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to About this scenario.
        /// </summary>
        public static string InfoCaption {
            get {
                return ResourceManager.GetString("InfoCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to scenarios.
        /// </summary>
        public static string MainPageTitle {
            get {
                return ResourceManager.GetString("MainPageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current app memory usage.
        /// </summary>
        public static string MemUsageCaption {
            get {
                return ResourceManager.GetString("MemUsageCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pinch &amp; zoom.
        /// </summary>
        public static string PinchZoomButtonCaption {
            get {
                return ResourceManager.GetString("PinchZoomButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This scenario shows how to implement pinch and zoom using the Viewport control and PinchManipulation property. Notice as you pinch, the image zooms centered around the area being pinched. Test this on a real phone..
        /// </summary>
        public static string PinchZoomHelpText {
            get {
                return ResourceManager.GetString("PinchZoomHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pinch &amp; zoom.
        /// </summary>
        public static string PinchZoomPageTitle {
            get {
                return ResourceManager.GetString("PinchZoomPageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LeftToRight.
        /// </summary>
        public static string ResourceFlowDirection {
            get {
                return ResourceManager.GetString("ResourceFlowDirection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to en-US.
        /// </summary>
        public static string ResourceLanguage {
            get {
                return ResourceManager.GetString("ResourceLanguage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample demonstrates common scenarios when working with images in an app. To see one in action, click on a link in the following list..
        /// </summary>
        public static string SampleDescription {
            get {
                return ResourceManager.GetString("SampleDescription", resourceCulture);
            }
        }
    }
}
