<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ResourceFlowDirection" xml:space="preserve">
    <value>LeftToRight</value>
    <comment>Controls the FlowDirection for all elements in the RootFrame. Set to the traditional direction of this resource file's language</comment>
  </data>
  <data name="ResourceLanguage" xml:space="preserve">
    <value>en-US</value>
    <comment>Controls the Language and ensures that the font for all elements in the RootFrame aligns with the app's language. Set to the language code of this resource file's language.</comment>
  </data>
  <data name="ApplicationTitle" xml:space="preserve">
    <value>sdkImageRecipes</value>
  </data>
  <data name="AfterUpdateCaption" xml:space="preserve">
    <value>after (MB)</value>
  </data>
  <data name="AppBarButtonInfoText" xml:space="preserve">
    <value>info</value>
  </data>
  <data name="AspectRatioCaption" xml:space="preserve">
    <value>maintain aspect ratio</value>
  </data>
  <data name="BeforeUpdateCaption" xml:space="preserve">
    <value>before (MB)</value>
  </data>
  <data name="CancelDownloadButtonCaption" xml:space="preserve">
    <value>cancel download</value>
  </data>
  <data name="DecodePixelHeightCaption" xml:space="preserve">
    <value>DecodePixelHeight:</value>
  </data>
  <data name="DecodePixelWidthCaption" xml:space="preserve">
    <value>DecodePixelWidth: </value>
  </data>
  <data name="DownloadButtonCaption" xml:space="preserve">
    <value>download</value>
  </data>
  <data name="DownloadCancelButtonCaption" xml:space="preserve">
    <value>download with cancel</value>
  </data>
  <data name="DownloadCancelHelpText" xml:space="preserve">
    <value>The WebClient class is used in order to demonstrate the CancelAsync method, which allows the download to be cancelled. If the download happens too quickly, you can slow it down using the Simulation Dashboard. Once the image is downloaded it is cached internally by the phone. To test this scenario again, clear the internal cache by restarting the emulator.</value>
  </data>
  <data name="DownloadCancelPageTitle" xml:space="preserve">
    <value>download &amp; cancel</value>
  </data>
  <data name="DownloadHelpText" xml:space="preserve">
    <value>This scenario shows how to download and image and give the user some visual feedback using a progress bar. If the download happens to quickly, you can slow it down using the Simulation Dashboard. Once the image is downloaded it is cached internally by the phone. To test this scenario again, clear the internal cache by restarting the emulator.</value>
  </data>
  <data name="DownloadPageTitle" xml:space="preserve">
    <value>download</value>
  </data>
  <data name="DownsampleButtonCaption" xml:space="preserve">
    <value>downsample</value>
  </data>
  <data name="DownsampleHelpText" xml:space="preserve">
    <value>To downsample an image and reduce its size, set the image's DecodePixelWidth  and DecodePixelHeight properties before loading it. When you don't use these properties, the application consumes unnecessary resources by caching the image at its original size and not at the smaller size that is displayed. To preserve aspect ratio, set one of these properties but not both. The DecodePixelHeight and DecodePixelWidth are displayed in the dph and dpw fields respectively. Observe the memory reduction given in the After (MB) field. Downsampling too much will result in an image that is blurred or pixelated.</value>
  </data>
  <data name="DownsamplePageTitle" xml:space="preserve">
    <value>downsample</value>
  </data>
  <data name="InfoCaption" xml:space="preserve">
    <value>About this scenario</value>
  </data>
  <data name="MainPageTitle" xml:space="preserve">
    <value>scenarios</value>
  </data>
  <data name="PinchZoomButtonCaption" xml:space="preserve">
    <value>pinch &amp; zoom</value>
  </data>
  <data name="PinchZoomHelpText" xml:space="preserve">
    <value>This scenario shows how to implement pinch and zoom using the Viewport control and PinchManipulation property. Notice as you pinch, the image zooms centered around the area being pinched. Test this on a real phone.</value>
  </data>
  <data name="PinchZoomPageTitle" xml:space="preserve">
    <value>pinch &amp; zoom</value>
  </data>
  <data name="SampleDescription" xml:space="preserve">
    <value>This sample demonstrates common scenarios when working with images in an app. To see one in action, click on a link in the following list.</value>
  </data>
  <data name="MemUsageCaption" xml:space="preserve">
    <value>Current app memory usage</value>
  </data>
</root>