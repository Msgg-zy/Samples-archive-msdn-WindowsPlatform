<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->

<common:LayoutAwarePage
    x:Class="SDKSample.SDKTemplate.Scenario4"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SDKSample.SDKTemplate"
    xmlns:common="using:SDKSample.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <StackPanel x:Name="Input">
          <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" >
            In this scenario, the app will update its tile using periodic updates which will poll a web service to 
            retrieve tile XML content.
            <LineBreak/>
            <LineBreak/>
            Periodic notifications are another way of updating tiles. Your app can specify a URL that points to a resource 
            on a web service that contains a tile update notification. The resource should respond to an HTTP GET request 
            and return properly formatted tile or badge notification XML. Your app should call the polling APIs each time 
            your app is launched. A schedule will be set up to continue polling the specified URL on a regular interval. 
            Once you have called the API, Windows will poll this URL regularly and update the associated tiles. Note that 
            your app's package will need to set the "Internet (client)" capability in its manifest.
            <LineBreak/> 
            <LineBreak/>
            It is also possible to poll several different URLs simultaneously for tile XML. The tile will automatically 
            cycle through each of the updates. Be sure to enable the notification queue on the tile updater object before 
            calling the periodic update API.
          </TextBlock>
          <TextBlock Style="{StaticResource BasicTextStyle}" FontWeight="Bold" TextWrapping="Wrap" Margin="0,10,0,0">
            Enter a URL to poll, choose a frequency, and press "Start polling"
            to begin polling for tile updates.
          </TextBlock>
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
              <TextBlock Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="URL 1:" />
              <TextBox x:Name="PollURL1" Text="http://" Width="500" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
              <TextBlock Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="URL 2:" />
              <TextBox x:Name="PollURL2" Text="http://" Width="500" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
              <TextBlock Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="URL 3:" />
              <TextBox x:Name="PollURL3" Text="http://" Width="500" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
              <TextBlock Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="URL 4:" />
              <TextBox x:Name="PollURL4" Text="http://" Width="500" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
              <TextBlock Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="URL 5:" />
              <TextBox x:Name="PollURL5" Text="http://" Width="500" />
            </StackPanel>
          <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
            <ComboBox x:Name="PeriodicRecurrence" Width="300" Height="50" SelectedIndex="0">
              <TextBlock>Every half-hour</TextBlock>
              <TextBlock>Hourly</TextBlock>
              <TextBlock>Every six hours</TextBlock>
              <TextBlock>Every 12 hours</TextBlock>
              <TextBlock>Daily</TextBlock>
            </ComboBox>
            <Button x:Name="StartTilePolling" Content="Start polling" Margin="0,0,10,0" Click="StartTilePolling_Click"/>
            <Button x:Name="StopTilePolling" Content="Stop polling" Margin="0,0,10,0" Click="StopTilePolling_Click"/>
          </StackPanel>
        </StackPanel>

        <Grid x:Name="Output" Grid.Row="1">  
            <TextBlock TextWrapping="Wrap" MaxWidth="1000" Style="{StaticResource BasicTextStyle}">
              As you begin and stop tile polling, the status will appear here.
            </TextBlock>
        </Grid>

        <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="FullScreenLandscape"/>
                <VisualState x:Name="Filled"/>
                <VisualState x:Name="FullScreenPortrait"/>
                <VisualState x:Name="Snapped"/>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
</common:LayoutAwarePage>
