<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->

<common:LayoutAwarePage
    x:Class="SDKSample.SDKTemplate.Scenario1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SDKSample.SDKTemplate"
    xmlns:common="using:SDKSample.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White" HorizontalAlignment="Left" VerticalAlignment="Top">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <StackPanel x:Name="Input">
            <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" >
              In this scenario, the app will request a notification channel and send it to the app's cloud service. 
              Additionally, this scenario shows how to close a notification channel.
              <LineBreak/>
              <LineBreak/>
              A notification channel uniquely identifies an instance of your app per user, per machine. The notification 
              channel can be used to send tile, toast, badge, and raw notifications to a specific user on a specific 
              device. Each app can have only one channel per tile. The channel created for the app's primary tile can 
              be used to send all notification types. Each tile on the Start screen will have a unique channel to which 
              tile notifications can be sent.
              <LineBreak/>
              <LineBreak/>
              Once your app receives a push notification channel, the app should send it to your app's cloud service, 
              which will store the channel and associate it with the app user who sent the channel. When you want to 
              send a notification to a user (for example, to update the user's app tile) the app cloud service will 
              perform an HTTP POST operation on the channel URI.
              <LineBreak/>
              <LineBreak/>
              Because notification channels expire, your app must take care to manage the renewal of the notification 
              channels, which is discussed in scenario 2.
              <LineBreak/>
              <LineBreak/>
              Note that your app's package will need to set the "Internet (client)" capability in its manifest. This 
              allows it to communicate with the Internet to send channels to your app's server.
              <LineBreak/>
              <LineBreak/>
              There may be cases where it is appropriate to close a push notification channel. For example, if a user 
              account is tied to the notifications they receive and the user logs off that account, the channel should 
              be closed if the user clears her credentials. 
            </TextBlock>
            <TextBlock Style="{StaticResource BasicTextStyle}" FontWeight="Bold" TextWrapping="Wrap" Margin="0,10,0,10">
              Click the buttons below to open or close notification channels.
              Note that you must specify a URL and authentication parameters.
            </TextBlock>
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
              <TextBlock Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="Server URL:" />
              <TextBox x:Name="ServerText" Text="http://" Width="500" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
              <Button x:Name="OpenChannel" Content="Reopen channel and send to server" Margin="0,0,10,0" Click="OpenChannel_Click"/>
              <Button x:Name="CloseChannel" Content="Close channel" Margin="0,0,10,0" Click="CloseChannel_Click"/>
            </StackPanel>
        </StackPanel>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
          <TextBlock Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap">
            The status of your channel and request to your server will appear here.
          </TextBlock>
        </Grid>

        <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="FullScreenLandscape"/>
                <VisualState x:Name="Filled"/>
                <VisualState x:Name="FullScreenPortrait"/>
                <VisualState x:Name="Snapped"/>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>

</common:LayoutAwarePage>
