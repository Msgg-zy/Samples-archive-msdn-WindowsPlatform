<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="ControlAndAppStyle.Scenario4"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:ControlAndAppStyle"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White" HorizontalAlignment="Left" VerticalAlignment="Top">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1"  TextWrapping="Wrap" Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" >
                Theme resources as mentioned in scenario 3 can be used in your app to provide a consistent experience. You can override the default Theme resources vaues in your app
                by creating ResourceDictionary entries using the same key names. This only works when the ResourceDictionary keys are applied in App.xaml, and only during app startup.
                All controls will use the new theme resource values you provide, assuming the controls haven't changed to not rely on a theme resource value. 
                <LineBreak/><LineBreak/>
                Theme resource values cannot be changed once the app has started, nor can you override a theme resource value in a different scope (such as in a Page); they will be ignored.
            </TextBlock>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="InputFullScreenLandscape"/>
                    <VisualState x:Name="InputFilled"/>
                    <VisualState x:Name="InputFullScreenPortrait"/>
                    <VisualState x:Name="InputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Stretch" VerticalAlignment="Top" Grid.Row="1" Margin="0,0,17,0">
            <!--Background="{StaticResource ApplicationPageBackgroundThemeBrush}"-->
            <TextBlock Style="{StaticResource BasicTextStyle}" VerticalAlignment="Top" HorizontalAlignment="Left" Text="The below section relies on both custom theme resource values (defined in DesertBranding.xaml) as well as new control template (for slider)."/>

            <StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{StaticResource ApplicationPageBackgroundThemeBrush}" Margin="0,20,0,0" Height="400">
                <StackPanel.Resources>
                        <ResourceDictionary Source="customStyles.xaml"/>
                </StackPanel.Resources>
                
                <TextBlock FontSize="26.667" Margin="0,0,0,25" Text="Please enter the information below."/>
                <TextBlock FontSize="14.667" Margin="0,0,0,5" Text="How many people do you want to feed?"/>
                <Slider Style="{StaticResource MySliderStyle}" TickPlacement="Inline" TickFrequency="1" Minimum="0" Maximum="10" HorizontalAlignment="Left" Orientation="Horizontal" Width="300" Margin="15,0,10,0"/>

                <TextBlock  FontSize="14.667" Margin="0,0,0,5" Text="What toppings do you want?"/>
                <StackPanel Orientation="Horizontal" Margin="0,0,0,15">
                    <CheckBox Margin="0,0,10,0">Peppers</CheckBox>
                    <CheckBox Margin="0,0,10,0">Onions</CheckBox>
                    <CheckBox Margin="0,0,10,0">Garlic</CheckBox>
                    <CheckBox Margin="0,0,10,0">Pineapple</CheckBox>
                </StackPanel>

                <TextBlock FontSize="14.667" Margin="0,0,0,5" Text="What filling do you want?"/>
                <StackPanel Orientation="Horizontal" Margin="0,0,0,15">
                    <RadioButton Margin="0,0,10,0">Beef</RadioButton>
                    <RadioButton Margin="0,0,10,0">Chicken</RadioButton>
                    <RadioButton Margin="0,0,10,0">Pork</RadioButton>
                    <RadioButton Margin="0,0,10,0">Tofu</RadioButton>
                </StackPanel>
                <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the output section -->
                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup>
                        <VisualState x:Name="OutputFullScreenLandscape"/>
                        <VisualState x:Name="OutputFilled"/>
                        <VisualState x:Name="OutputFullScreenPortrait"/>
                        <VisualState x:Name="OutputSnapped"/>
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
            </StackPanel>
        </Grid>
    </Grid>
</common:LayoutAwarePage>
