'
'   Copyright (c) 2011 Microsoft Corporation.  All rights reserved.
'   Use of this sample source code is subject to the terms of the Microsoft license 
'   agreement under which you licensed this sample source code and is provided AS-IS.
'   If you did not accept the terms of the license agreement, you are not authorized 
'   to use this sample source code.  For the terms of the license, please see the 
'   license agreement between you and Microsoft.
'  
'   To see all Code Samples for Windows Phone, visit http://go.microsoft.com/fwlink/?LinkID=219604 
'  
'
Imports Microsoft.Phone.BackgroundAudio
Imports System.Diagnostics
Imports System.Collections.Generic


Public Class AudioPlayer
    Inherits AudioPlayerAgent
    Private Shared _classInitialized As Boolean

    ' What's the current track?
    Private Shared currentTrackNumber As Integer = 0

    ' Ideally, we would get a list of available tracks from an audio streaming site.
    ' This sample just plays sine waves generated by the SineMediaStreamSource.
    Private Shared _playList As New List(Of AudioTrack)() From {New AudioTrack(Nothing, "A note", Nothing, Nothing, Nothing, "440", EnabledPlayerControls.All), _
                                                                New AudioTrack(Nothing, "A#/Bb note", Nothing, Nothing, Nothing, "466.16", EnabledPlayerControls.All), _
                                                                New AudioTrack(Nothing, "B note", Nothing, Nothing, Nothing, "493.88", EnabledPlayerControls.All), _
                                                                New AudioTrack(Nothing, "C note", Nothing, Nothing, Nothing, "523.25", EnabledPlayerControls.All), _
                                                                New AudioTrack(Nothing, "C#/Db note", Nothing, Nothing, Nothing, "554.37", EnabledPlayerControls.All), _
                                                                New AudioTrack(Nothing, "D note", Nothing, Nothing, Nothing, "587.33", EnabledPlayerControls.All), _
                                                                New AudioTrack(Nothing, "D#/Eb note", Nothing, Nothing, Nothing, "622.25", EnabledPlayerControls.All), _
                                                                New AudioTrack(Nothing, "E note", Nothing, Nothing, Nothing, "659.25", EnabledPlayerControls.All), _
                                                                New AudioTrack(Nothing, "F note", Nothing, Nothing, Nothing, "698.46", EnabledPlayerControls.All), _
                                                                New AudioTrack(Nothing, "F#/Gb note", Nothing, Nothing, Nothing, "739.99", EnabledPlayerControls.All), _
                                                                New AudioTrack(Nothing, "G note", Nothing, Nothing, Nothing, "783.99", EnabledPlayerControls.All), _
                                                                New AudioTrack(Nothing, "G#/Ab note", Nothing, Nothing, Nothing, "830.61", EnabledPlayerControls.All), _
                                                                New AudioTrack(Nothing, "A note", Nothing, Nothing, Nothing, "880", EnabledPlayerControls.All)}


    ''' <remarks>
    ''' AudioPlayer instances can share the same process. 
    ''' Static fields can be used to share state between AudioPlayer instances
    ''' or to communicate with the Audio Streaming agent.
    ''' </remarks>
    Public Sub New()
        If Not _classInitialized Then
            _classInitialized = True
            ' Subscribe to the managed exception handler
            Deployment.Current.Dispatcher.BeginInvoke(Sub() AddHandler Application.Current.UnhandledException, AddressOf AudioPlayer_UnhandledException)
        End If
    End Sub

    ''' Code to execute on Unhandled Exceptions
    Private Sub AudioPlayer_UnhandledException(ByVal sender As Object, ByVal e As ApplicationUnhandledExceptionEventArgs)
        If System.Diagnostics.Debugger.IsAttached Then
            ' An unhandled exception has occurred; break into the debugger
            System.Diagnostics.Debugger.Break()
        End If
    End Sub

    ''' <summary>
    ''' Called when the playstate changes, except for the Error state (see OnError)
    ''' </summary>
    ''' <param name="player">The BackgroundAudioPlayer</param>
    ''' <param name="track">The track playing at the time the playstate changed</param>
    ''' <param name="playState">The new playstate of the player</param>
    ''' <remarks>
    ''' Play State changes cannot be cancelled. They are raised even if the application
    ''' caused the state change itself, assuming the application has opted-in to the callback.
    ''' 
    ''' Notable playstate events: 
    ''' (a) TrackEnded: invoked when the player has no current track. The agent can set the next track.
    ''' (b) TrackReady: an audio track has been set and it is now ready for playack.
    ''' 
    ''' Call NotifyComplete() only once, after the agent request has been completed, including async callbacks.
    ''' </remarks>
    Protected Overrides Sub OnPlayStateChanged(ByVal player As BackgroundAudioPlayer, ByVal track As AudioTrack, ByVal playState As PlayState)
        Select Case playState
            Case playState.TrackEnded
                player.Track = GetNextTrack()

            Case playState.TrackReady
                player.Volume = 1.0
                player.Play()

            Case playState.Shutdown
                ' TODO: Handle the shutdown state here (e.g. save state)

            Case playState.Unknown

            Case playState.Stopped

            Case playState.Paused

            Case playState.Playing

            Case playState.BufferingStarted

            Case playState.BufferingStopped

            Case playState.Rewinding

            Case playState.FastForwarding
        End Select

        NotifyComplete()
    End Sub


    ''' <summary>
    ''' Called when the user requests an action using application/system provided UI
    ''' </summary>
    ''' <param name="player">The BackgroundAudioPlayer</param>
    ''' <param name="track">The track playing at the time of the user action</param>
    ''' <param name="action">The action the user has requested</param>
    ''' <param name="param">The data associated with the requested action.
    ''' In the current version this parameter is only for use with the Seek action,
    ''' to indicate the requested position of an audio track</param>
    ''' <remarks>
    ''' User actions do not automatically make any changes in system state; the agent is responsible
    ''' for carrying out the user actions if they are supported.
    ''' 
    ''' Call NotifyComplete() only once, after the agent request has been completed, including async callbacks.
    ''' </remarks>
    Protected Overrides Sub OnUserAction(ByVal player As BackgroundAudioPlayer, ByVal track As AudioTrack, ByVal action As UserAction, ByVal param As Object)
        Select Case action
            Case UserAction.Play
                If PlayState.Playing <> player.PlayerState Then
                    player.Track = _playList(currentTrackNumber)
                End If

            Case UserAction.Stop
                player.Stop()

            Case UserAction.Pause
                If PlayState.Playing = player.PlayerState Then
                    player.Pause()
                End If

            Case UserAction.FastForward
                ' Fast Forward only works with non-MSS clients.
                ' If the Source is null, we are streaming an MSS.
                If track.Source IsNot Nothing Then
                    player.FastForward()
                End If

            Case UserAction.Rewind
                ' Rewind only works with non-MSS clients.
                ' If the Source is null, we are streaming an MSS.
                If track.Source IsNot Nothing Then
                    player.Rewind()
                End If

            Case UserAction.Seek
                ' Seek only works with non-MSS clients.
                ' If the Source is null, we are streaming an MSS.
                If track.Source IsNot Nothing Then
                    player.Position = CType(param, TimeSpan)
                End If

            Case UserAction.SkipNext
                player.Track = GetNextTrack()

            Case UserAction.SkipPrevious
                player.Track = GetPreviousTrack()
        End Select

        NotifyComplete()
    End Sub


    ''' <summary>
    ''' Implements the logic to get the next AudioTrack instance.
    ''' In a playlist, the source can be from a file, a web request, etc.
    ''' </summary>
    ''' <remarks>
    ''' The AudioTrack URI determines the source, which can be:
    ''' (a) Isolated-storage file (Relative URI, represents path in the isolated storage)
    ''' (b) HTTP URL (absolute URI)
    ''' (c) MediaStreamSource (null)
    ''' </remarks>
    ''' <returns>an instance of AudioTrack, or null if the playback is completed</returns>
    Private Function GetNextTrack() As AudioTrack
        currentTrackNumber += 1
        If currentTrackNumber >= _playList.Count Then
            ' We've gone past the end, wrap 
            ' to the beginning of the list
            currentTrackNumber = 0
        End If

        ' Specify the track
        Return _playList(currentTrackNumber)
    End Function


    ''' <summary>
    ''' Implements the logic to get the previous AudioTrack instance.
    ''' </summary>
    ''' <remarks>
    ''' The AudioTrack URI determines the source, which can be:
    ''' (a) Isolated-storage file (Relative URI, represents path in the isolated storage)
    ''' (b) HTTP URL (absolute URI)
    ''' (c) MediaStreamSource (null)
    ''' </remarks>
    ''' <returns>an instance of AudioTrack, or null if previous track is not allowed</returns>
    Private Function GetPreviousTrack() As AudioTrack
        currentTrackNumber -= 1
        If currentTrackNumber < 0 Then
            ' We've gone past the beginning, 
            ' wrap to the end of the list
            currentTrackNumber = _playList.Count - 1
        End If

        ' Specify the track
        Return _playList(currentTrackNumber)
    End Function

    ''' <summary>
    ''' Called whenever there is an error with playback, such as an AudioTrack not downloading correctly
    ''' </summary>
    ''' <param name="player">The BackgroundAudioPlayer</param>
    ''' <param name="track">The track that had the error</param>
    ''' <param name="error">The error that occured</param>
    ''' <param name="isFatal">If true, playback cannot continue and playback of the track will stop</param>
    ''' <remarks>
    ''' This method is not guaranteed to be called in all cases. For example, if the background agent 
    ''' itself has an unhandled exception, it won't get called back to handle its own errors.
    ''' </remarks>
    Protected Overrides Sub OnError(ByVal player As BackgroundAudioPlayer, ByVal track As AudioTrack, ByVal [error] As Exception, ByVal isFatal As Boolean)
        If isFatal Then
            Abort()
        Else
            NotifyComplete()
        End If

    End Sub

    ''' <summary>
    ''' Called when the agent request is getting cancelled
    ''' </summary>
    ''' <remarks>
    ''' Once the request is Cancelled, the agent gets 5 seconds to finish its work,
    ''' by calling NotifyComplete()/Abort().
    ''' </remarks>
    Protected Overrides Sub OnCancel()
        ' Do any necessary cleanup work, such as saving state.
    End Sub
End Class
