<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->

<common:LayoutAwarePage
    x:Class="SDKSample.TouchKeyboard.DoNotAutoInvoke"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SDKSample.TouchKeyboard"
    xmlns:common="using:SDKSample.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White" HorizontalAlignment="Left" VerticalAlignment="Top">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <StackPanel>
                <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" Text="When using XAML controls that accept input (i.e. TextBox, RichTextBox, PasswordBox) the Touch Keyboard will invoke automatically when the user taps on the control using touch or pen. This behavior also holds for controls that are derived from these classes. The Touch Keyboard will also automatically invoke if keyboard focus is programmatically set on such a control.&#13;&#13;Sometimes an app may want to set focus by default onto an editable control but not have the Touch Keyboard automatically invoke. This is typically done to prevent the Touch Keyboard from automatically occluding relevant content (e.g. privacy statement links, content-rich landing page, or other input fields of interest in a pre-populated form) while still allowing physical keyboard users to immediately start typing.  &#13;&#13;To disable Touch Keyboard auto-invocation due to programmatically setting focus on a XAML control that accepts input, the property PreventKeyboardDisplayOnProgrammaticFocus can be applied. Since the Touch Keyboard follows a user-driven invocation model, this property will not prevent the Touch Keyboard from showing when a user taps on the bounding region of the editable control."></TextBlock>
            </StackPanel>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <StackPanel Orientation="Horizontal">
                <Button  VerticalAlignment="Top" Name="focusOntextBox1" Click="onFocusClick" Margin="0,0,75,0" >Set focus on input field</Button>
                <StackPanel Orientation="Vertical" VerticalAlignment="Top">
                    <TextBox Name="textBox" Margin="2" Height="40" HorizontalAlignment="Left" Width="400" Padding="5" AutomationProperties.Name="XAML Text Box"></TextBox>
                    <CheckBox Name="autoInvokeControl" HorizontalAlignment="Left" Checked="onAutoInvokedChecked" Unchecked="onAutoInvokedUnchecked">Prevent touch keyboard display on programmatic focus</CheckBox>
                </StackPanel>
            </StackPanel>
        </Grid>

        <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="FullScreenLandscape"/>
                <VisualState x:Name="Filled"/>
                <VisualState x:Name="FullScreenPortrait"/>
                <VisualState x:Name="Snapped"/>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>

</common:LayoutAwarePage>
