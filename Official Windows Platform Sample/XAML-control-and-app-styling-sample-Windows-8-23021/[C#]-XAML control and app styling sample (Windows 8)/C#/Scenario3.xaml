<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="ControlAndAppStyle.Scenario3"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:ControlAndAppStyle"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1" Grid.Row="0" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" >
                The XAML runtime provides a list of resources called &quot;theme resources&quot; which can be used anywhere in your app. Theme resources primarily consist of brushes but there are other metrics such as border sizes or font sizes.
                <LineBreak/><LineBreak/>
                Theme resources values change based upon the app theme you are using, Light or Dark. The values also change based upon High Contrast.
            </TextBlock>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="InputFullScreenLandscape"/>
                    <VisualState x:Name="InputFilled"/>
                    <VisualState x:Name="InputFullScreenPortrait"/>
                    <VisualState x:Name="InputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <StackPanel Grid.Column="0" Margin="0,0,10,0">
                <Border  BorderThickness="{StaticResource ButtonBorderThemeThickness}" 
                         BorderBrush="{StaticResource ButtonBorderThemeBrush}" 
                         Background="{StaticResource ButtonBackgroundThemeBrush}"
                         Padding="12,4,12,4">
                    <TextBlock Text="Looks like a button" HorizontalAlignment="Center" VerticalAlignment="Center"
                               FontFamily="{StaticResource ContentControlThemeFontFamily}" 
                               FontSize="{StaticResource ControlContentThemeFontSize}" 
                               Foreground="{StaticResource ButtonForegroundThemeBrush}" 
                               FontWeight="SemiBold"/>
                </Border>
                <Button Content="Is a button"/>
            </StackPanel>
            <TextBlock Grid.Column="1" Style="{StaticResource BasicTextStyle}" MaxWidth="400" TextWrapping="Wrap">
                The Border element and TextBlock to the left looks like a button but it isn't! Instead it is using theme resource values just like what a button does.
            </TextBlock>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the output section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="OutputFullScreenLandscape"/>
                    <VisualState x:Name="OutputFilled"/>
                    <VisualState x:Name="OutputFullScreenPortrait"/>
                    <VisualState x:Name="OutputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </Grid>
</common:LayoutAwarePage>
