<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->

<common:LayoutAwarePage
    x:Class="SDKSample.XAMLPopup.Scenario3"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SDKSample.XAMLPopup"
    xmlns:common="using:SDKSample.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1" Grid.Row="0" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
                In XAML, the <Bold>Popup</Bold> control is also the method in which you can obtain the 'flyout' behavior in your application for 
                menus, input dialogs from an AppBar or creating a custom settings panel experience.  
                <LineBreak /><LineBreak />
                All of these 'flyout' experiences can be accomplished by using a Popup and enabling a single property: <Bold>IsLightDismissEnabled</Bold>. 
                Setting this property gives you the light dismiss behavior of when a user gestures away from your Popup content (either by tapping or clicking on other UI) 
                and your Popup will automatically close.
                <LineBreak /><LineBreak />
                The IsLightDismissedEnabled property combined with some animation transitions can help you accomplish the flyout behavior as demonstrated below. 
                The developer will still be responsible for correctly positioning the Popup control where desired in accordance with UI guidelines.
            </TextBlock>
        </Grid>

        <Grid x:Name="Output" Grid.Row="1">
            <StackPanel>
                <Button Content="Show Popup (with light dismiss)" Click="ShowPopupLightDismissClicked" />
                <Button Content="Show Popup (with light dismiss and animations)" Click="ShowPopupAnimationClicked" />
                <Button Content="Show Popup (simulating Settings)" Click="ShowPopupSettingsClicked" />
            </StackPanel>
            <Popup x:Name="LightDismissSimplePopup" HorizontalOffset="200" VerticalOffset="10" IsLightDismissEnabled="True">
                <Border BorderBrush="{StaticResource ApplicationForegroundThemeBrush}" BorderThickness="2" Background="{StaticResource ApplicationPageBackgroundThemeBrush}" Width="200" Height="200">
                    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TextBlock Text="Simple Popup" FontSize="24.667" HorizontalAlignment="Center" />
                        <Button Content="Close" Click="ClosePopupClicked" HorizontalAlignment="Center" />
                    </StackPanel>
                </Border>
            </Popup>
            <Popup x:Name="LightDismissAnimatedPopup" HorizontalOffset="200" VerticalOffset="10" IsLightDismissEnabled="True">
                <Popup.ChildTransitions>
                    <TransitionCollection>
                        <PopupThemeTransition />
                    </TransitionCollection>
                </Popup.ChildTransitions>
                <Border BorderBrush="{StaticResource ApplicationForegroundThemeBrush}" BorderThickness="2" Background="{StaticResource ApplicationPageBackgroundThemeBrush}" Width="200" Height="200">
                    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TextBlock Text="Simple Popup" FontSize="24.667" HorizontalAlignment="Center" />
                        <Button Content="Close" Click="CloseAnimatedPopupClicked" HorizontalAlignment="Center" />
                    </StackPanel>
                </Border>
            </Popup>
            <Popup x:Name="SettingsAnimatedPopup" IsLightDismissEnabled="True">
                <Popup.ChildTransitions>
                    <TransitionCollection>
                        <PaneThemeTransition />
                    </TransitionCollection>
                </Popup.ChildTransitions>
                <Border BorderBrush="{StaticResource ApplicationForegroundThemeBrush}" BorderThickness="2" Background="{StaticResource ApplicationPageBackgroundThemeBrush}" x:Name="RootPopupBorder">
                    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TextBlock Text="Simple Popup" FontSize="24.667" HorizontalAlignment="Center" />
                        <Button Content="Close" Click="CloseSettingsPopupClicked" HorizontalAlignment="Center" />
                    </StackPanel>
                </Border>
            </Popup>
        </Grid>
    </Grid>
</common:LayoutAwarePage>
